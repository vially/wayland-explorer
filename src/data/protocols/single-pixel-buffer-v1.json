{
  "type": "protocol",
  "name": "single_pixel_buffer_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright © 2022 Simon Ser\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol extension allows clients to create single-pixel buffers.\n\nCompositors supporting this protocol extension should also support the\nviewporter protocol extension. Clients may use viewporter to scale a\nsingle-pixel buffer to a desired size.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.",
    "summary": "single pixel buffer factory"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wp_single_pixel_buffer_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "The wp_single_pixel_buffer_manager_v1 interface is a factory for\nsingle-pixel buffers.",
        "summary": "global factory for single-pixel buffers"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the wp_single_pixel_buffer_manager_v1 object.\n\nThe child objects created via this interface are unaffected.",
            "summary": "destroy the manager"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "create_u32_rgba_buffer",
          "description": {
            "type": "description",
            "text": "Create a single-pixel buffer from four 32-bit RGBA values.\n\nUnless specified in another protocol extension, the RGBA values use\npre-multiplied alpha.\n\nThe width and height of the buffer are 1.\n\nThe r, g, b and a arguments valid range is from UINT32_MIN (0)\nto UINT32_MAX (0xffffffff).\n\nThese arguments should be interpreted as a percentage, i.e.\n- UINT32_MIN = 0% of the given color component\n- UINT32_MAX = 100% of the given color component",
            "summary": "create a 1×1 buffer from 32-bit RGBA values"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wl_buffer",
              "protocol": "wayland"
            },
            {
              "type": "arg",
              "name": "r",
              "argType": "uint",
              "summary": "value of the buffer's red channel"
            },
            {
              "type": "arg",
              "name": "g",
              "argType": "uint",
              "summary": "value of the buffer's green channel"
            },
            {
              "type": "arg",
              "name": "b",
              "argType": "uint",
              "summary": "value of the buffer's blue channel"
            },
            {
              "type": "arg",
              "name": "a",
              "argType": "uint",
              "summary": "value of the buffer's alpha channel"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    }
  ]
}
