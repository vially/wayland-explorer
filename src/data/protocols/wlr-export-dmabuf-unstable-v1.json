{"type":"protocol","name":"wlr_export_dmabuf_unstable_v1","copyright":{"type":"copyright","text":"Copyright Â© 2018 Rostislav Pehlivanov\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"An interface to capture surfaces in an efficient way by exporting DMA-BUFs.\n\n    Warning! The protocol described in this file is experimental and\n    backward incompatible changes may be made. Backward compatible changes\n    may be added together with the corresponding interface version bump.\n    Backward incompatible changes are done by bumping the version number in\n    the protocol and interface names and resetting the interface version.\n    Once the protocol is to be declared stable, the 'z' prefix and the\n    version number in the protocol and interface names are removed and the\n    interface version number is reset.","summary":"a protocol for low overhead screen content capturing"},"interfaces":[{"type":"interface","name":"zwlr_export_dmabuf_manager_v1","version":"1","description":{"type":"description","text":"This object is a manager with which to start capturing from sources.","summary":"manager to inform clients and begin capturing"},"requests":[{"type":"request","name":"capture_output","description":{"type":"description","text":"Capture the next frame of an entire output.","summary":"capture a frame from an output"},"args":[{"type":"arg","name":"frame","argType":"new_id","interface":"zwlr_export_dmabuf_frame_v1"},{"type":"arg","name":"overlay_cursor","argType":"int","summary":"include custom client hardware cursor on top of the frame"},{"type":"arg","name":"output","argType":"object","interface":"wl_output"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"All objects created by the manager will still remain valid, until their\n        appropriate destroy request has been called.","summary":"destroy the manager"},"args":[]}],"events":[],"enums":[]},{"type":"interface","name":"zwlr_export_dmabuf_frame_v1","version":"1","description":{"type":"description","text":"This object represents a single DMA-BUF frame.\n\n      If the capture is successful, the compositor will first send a \"frame\"\n      event, followed by one or several \"object\". When the frame is available\n      for readout, the \"ready\" event is sent.\n\n      If the capture failed, the \"cancel\" event is sent. This can happen anytime\n      before the \"ready\" event.\n\n      Once either a \"ready\" or a \"cancel\" event is received, the client should\n      destroy the frame. Once an \"object\" event is received, the client is\n      responsible for closing the associated file descriptor.\n\n      All frames are read-only and may not be written into or altered.","summary":"a DMA-BUF frame"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Unreferences the frame. This request must be called as soon as its no\n        longer used.\n\n        It can be called at any time by the client. The client will still have\n        to close any FDs it has been given.","summary":"delete this object, used or not"},"args":[]}],"events":[{"type":"event","name":"frame","description":{"type":"description","text":"Main event supplying the client with information about the frame. If the\n        capture didn't fail, this event is always emitted first before any other\n        events.\n\n        This event is followed by a number of \"object\" as specified by the\n        \"num_objects\" argument.","summary":"a frame description"},"args":[{"type":"arg","name":"width","argType":"uint","summary":"frame width in pixels"},{"type":"arg","name":"height","argType":"uint","summary":"frame height in pixels"},{"type":"arg","name":"offset_x","argType":"uint","summary":"crop offset for the x axis"},{"type":"arg","name":"offset_y","argType":"uint","summary":"crop offset for the y axis"},{"type":"arg","name":"buffer_flags","argType":"uint","summary":"flags which indicate properties (invert, interlacing),\n                    has the same values as zwp_linux_buffer_params_v1:flags"},{"type":"arg","name":"flags","argType":"uint","summary":"indicates special frame features","enum":"flags"},{"type":"arg","name":"format","argType":"uint","summary":"format of the frame (DRM_FORMAT_*)"},{"type":"arg","name":"mod_high","argType":"uint","summary":"drm format modifier, high"},{"type":"arg","name":"mod_low","argType":"uint","summary":"drm format modifier, low"},{"type":"arg","name":"num_objects","argType":"uint","summary":"indicates how many objects (FDs) the frame has (max 4)"}]},{"type":"event","name":"object","description":{"type":"description","text":"Event which serves to supply the client with the file descriptors\n        containing the data for each object.\n\n        After receiving this event, the client must always close the file\n        descriptor as soon as they're done with it and even if the frame fails.","summary":"an object description"},"args":[{"type":"arg","name":"index","argType":"uint","summary":"index of the current object"},{"type":"arg","name":"fd","argType":"fd","summary":"fd of the current object"},{"type":"arg","name":"size","argType":"uint","summary":"size in bytes for the current object"},{"type":"arg","name":"offset","argType":"uint","summary":"starting point for the data in the object's fd"},{"type":"arg","name":"stride","argType":"uint","summary":"line size in bytes"},{"type":"arg","name":"plane_index","argType":"uint","summary":"index of the plane the data in the object applies to"}]},{"type":"event","name":"ready","description":{"type":"description","text":"This event is sent as soon as the frame is presented, indicating it is\n        available for reading. This event includes the time at which\n        presentation happened at.\n\n        The timestamp is expressed as tv_sec_hi, tv_sec_lo, tv_nsec triples,\n        each component being an unsigned 32-bit value. Whole seconds are in\n        tv_sec which is a 64-bit value combined from tv_sec_hi and tv_sec_lo,\n        and the additional fractional part in tv_nsec as nanoseconds. Hence,\n        for valid timestamps tv_nsec must be in [0, 999999999]. The seconds part\n        may have an arbitrary offset at start.\n\n        After receiving this event, the client should destroy this object.","summary":"indicates frame is available for reading"},"args":[{"type":"arg","name":"tv_sec_hi","argType":"uint","summary":"high 32 bits of the seconds part of the timestamp"},{"type":"arg","name":"tv_sec_lo","argType":"uint","summary":"low 32 bits of the seconds part of the timestamp"},{"type":"arg","name":"tv_nsec","argType":"uint","summary":"nanoseconds part of the timestamp"}]},{"type":"event","name":"cancel","description":{"type":"description","text":"If the capture failed or if the frame is no longer valid after the\n        \"frame\" event has been emitted, this event will be used to inform the\n        client to scrap the frame.\n\n        If the failure is temporary, the client may capture again the same\n        source. If the failure is permanent, any further attempts to capture the\n        same source will fail again.\n\n        After receiving this event, the client should destroy this object.","summary":"indicates the frame is no longer valid"},"args":[{"type":"arg","name":"reason","argType":"uint","summary":"indicates a reason for cancelling this frame capture","enum":"cancel_reason"}]}],"enums":[{"type":"enum","name":"flags","bitfield":false,"description":{"type":"description","text":"Special flags that should be respected by the client.","summary":"frame flags"},"entries":[{"type":"entry","name":"transient","value":"0x1","summary":"clients should copy frame before processing"}]},{"type":"enum","name":"cancel_reason","bitfield":false,"description":{"type":"description","text":"Indicates reason for cancelling the frame.","summary":"cancel reason"},"entries":[{"type":"entry","name":"temporary","value":"0","summary":"temporary error, source will produce more frames"},{"type":"entry","name":"permanent","value":"1","summary":"fatal error, source will not produce frames"},{"type":"entry","name":"resizing","value":"2","summary":"temporary error, source will produce more frames"}]}]}]}