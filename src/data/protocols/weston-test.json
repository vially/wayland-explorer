{"type":"protocol","name":"weston_test","copyright":{"type":"copyright","text":"Copyright Â© 2012 Intel Corporation\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"weston_test","version":"1","description":{"type":"description","text":"Internal testing facilities for the weston compositor.\n\n      It can't be stressed enough that these should never ever be used\n      outside of running weston's tests.  The weston-test.so module should\n      never be installed.\n\n      These requests may allow clients to do very bad things.","summary":"weston internal testing"},"requests":[{"type":"request","name":"move_surface","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"},{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"}]},{"type":"request","name":"move_pointer","args":[{"type":"arg","name":"tv_sec_hi","argType":"uint"},{"type":"arg","name":"tv_sec_lo","argType":"uint"},{"type":"arg","name":"tv_nsec","argType":"uint"},{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"}]},{"type":"request","name":"send_button","args":[{"type":"arg","name":"tv_sec_hi","argType":"uint"},{"type":"arg","name":"tv_sec_lo","argType":"uint"},{"type":"arg","name":"tv_nsec","argType":"uint"},{"type":"arg","name":"button","argType":"int"},{"type":"arg","name":"state","argType":"uint"}]},{"type":"request","name":"send_axis","args":[{"type":"arg","name":"tv_sec_hi","argType":"uint"},{"type":"arg","name":"tv_sec_lo","argType":"uint"},{"type":"arg","name":"tv_nsec","argType":"uint"},{"type":"arg","name":"axis","argType":"uint"},{"type":"arg","name":"value","argType":"fixed"}]},{"type":"request","name":"activate_surface","args":[{"type":"arg","name":"surface","argType":"object","interface":"wl_surface","allowNull":"true"}]},{"type":"request","name":"send_key","args":[{"type":"arg","name":"tv_sec_hi","argType":"uint"},{"type":"arg","name":"tv_sec_lo","argType":"uint"},{"type":"arg","name":"tv_nsec","argType":"uint"},{"type":"arg","name":"key","argType":"uint"},{"type":"arg","name":"state","argType":"uint"}]},{"type":"request","name":"device_release","args":[{"type":"arg","name":"device","argType":"string"}]},{"type":"request","name":"device_add","args":[{"type":"arg","name":"device","argType":"string"}]},{"type":"request","name":"send_touch","args":[{"type":"arg","name":"tv_sec_hi","argType":"uint"},{"type":"arg","name":"tv_sec_lo","argType":"uint"},{"type":"arg","name":"tv_nsec","argType":"uint"},{"type":"arg","name":"touch_id","argType":"int"},{"type":"arg","name":"x","argType":"fixed"},{"type":"arg","name":"y","argType":"fixed"},{"type":"arg","name":"touch_type","argType":"uint"}]}],"events":[{"type":"event","name":"pointer_position","args":[{"type":"arg","name":"x","argType":"fixed"},{"type":"arg","name":"y","argType":"fixed"}]}],"enums":[]},{"type":"interface","name":"weston_test_runner","version":"1","description":{"type":"description","text":"This is a global singleton interface for Weston internal tests.\n\n      This interface allows a test client to trigger compositor-side\n      test procedures. This is useful for cases, where the actual tests\n      are in compositor plugins, but they also require the presence of\n      a particular client.\n\n      This interface is implemented by the compositor plugins containing\n      the testing code.\n\n      A test client starts a test with the \"run\" request. It must not send\n      another \"run\" request until receiving the \"finished\" event. If the\n      compositor-side test succeeds, the \"finished\" event is sent. If the\n      compositor-side test fails, the compositor should send the protocol\n      error \"test_failed\", but it may also exit with an error (e.g. SEGV).\n\n      Unknown test name will raise \"unknown_test\" protocol error.","summary":"weston internal testing"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]},{"type":"request","name":"run","args":[{"type":"arg","name":"test_name","argType":"string"}]}],"events":[{"type":"event","name":"finished","args":[]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"test_failed","value":"0","summary":"compositor test failed"},{"type":"entry","name":"unknown_test","value":"1","summary":"unrecognized test name"}]}]}]}