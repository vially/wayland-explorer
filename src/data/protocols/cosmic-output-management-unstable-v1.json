{
  "type": "protocol",
  "name": "cosmic_output_management_unstable_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright Â© 2024 Victoria Brekenfeld\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "This protocol serves as an extension to wlr-output-management.\n\nIt primarily adds explicit output mirroring,\nwhile upstream is figuring out how to best support that.\n\nIt was designed against version 4 of wlr-output-management, but tries\nit's best to be forward compatible.",
    "summary": "extension protocol to wlr-output-management"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "zcosmic_output_manager_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "This interface provides extension points for wlr-output-management types.",
        "summary": "Output configuration manager"
      },
      "requests": [
        {
          "type": "request",
          "name": "get_head",
          "description": {
            "type": "description",
            "text": "Gets an extension object for zwlr_output_head_v1.\n\nAs soon as the extended output is created, events will be dispatched with an accompanying\n`done`-event delivered to the matching `zwlr_output_manager_v1` afterwards.\n\nAny further updates will produce new events, if properties of the zcosmic_output_head_v1 change,\njust like for the original `zwlr_output_head_v1`. Events should be handled as atomic, as denoted\nby `zwlr_output_manager_v1::done`.\n\nTrying to create more than one zcosmic_output_head_v1 per zwlr_output_head_v1 will raise an\n\"already_extended\" error.",
            "summary": "Get a zcosmic_output_head_v1 for an existing zwlr_output_head_v1"
          },
          "args": [
            {
              "type": "arg",
              "name": "extended",
              "argType": "new_id",
              "interface": "zcosmic_output_head_v1"
            },
            {
              "type": "arg",
              "name": "head",
              "argType": "object",
              "interface": "zwlr_output_head_v1",
              "protocol": "wlr-output-management-unstable-v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_configuration",
          "description": {
            "type": "description",
            "text": "Gets an extension object for zwlr_output_configuration_v1.\n\nTrying to create more than one zcosmic_output_configuration_v1 per zwlr_output_configuration_v1\nwill raise an \"already_extended\" error.",
            "summary": "Get a zcosmic_output_configuration_v1 for an existing zwlr_output_configuration_v1"
          },
          "args": [
            {
              "type": "arg",
              "name": "extended",
              "argType": "new_id",
              "interface": "zcosmic_output_configuration_v1"
            },
            {
              "type": "arg",
              "name": "config",
              "argType": "object",
              "interface": "zwlr_output_configuration_v1",
              "protocol": "wlr-output-management-unstable-v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_configuration_head",
          "description": {
            "type": "description",
            "text": "Gets an extension object for zwlr_output_configuration_head_v1.\n\nTrying to create more than one zcosmic_output_configuration_head_v1 per\nzwlr_output_configuration_head_v1 will raise an \"already_extended\" error.",
            "summary": "Get a zcosmic_output_configuration_head_v1 for an existing zwlr_output_configuration_head_v1"
          },
          "args": [
            {
              "type": "arg",
              "name": "extended",
              "argType": "new_id",
              "interface": "zcosmic_output_configuration_head_v1"
            },
            {
              "type": "arg",
              "name": "config_head",
              "argType": "object",
              "interface": "zwlr_output_configuration_head_v1",
              "protocol": "wlr-output-management-unstable-v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroys this global. All previously created objects remain valid.",
            "summary": "Destroy this global"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_xwayland_primary",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This requests a head to be advertised as the primary output via randr to Xwayland.\n\nNo head has to be marked primary, if `null` is passed Xwayland won't advertise a primary output.\nSending a disabled head will be ignored to avoid races.",
            "summary": "set head as the primary for xwayland"
          },
          "args": [
            {
              "type": "arg",
              "name": "head",
              "argType": "object",
              "summary": "head to be advertised as primary",
              "interface": "zcosmic_output_head_v1",
              "allowNull": "true"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "already_extended",
              "value": "1",
              "summary": "object already created"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zcosmic_output_head_v1",
      "version": "3",
      "description": {
        "type": "description",
        "text": "Extension to zwlr_output_head_v1.\n\nAdds additional read-only properties.\n\nProperties sent via this interface are applied atomically via the wlr_output_manager.done event.\nNo guarantees are made regarding the order in which properties are sent.",
        "summary": "Output extension object"
      },
      "requests": [
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the compositor that it is not interested\nin the head object anymore.",
            "summary": "destroy the output head"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "scale_1000",
          "description": {
            "type": "description",
            "text": "This events describes the scale of the head in the global compositor\nspace multiplied by 1000 for additional precision.\n\nIt is only sent if the output is enabled.",
            "summary": "current scale"
          },
          "args": [
            {
              "type": "arg",
              "name": "scale_1000",
              "argType": "int"
            }
          ]
        },
        {
          "type": "event",
          "name": "mirroring",
          "description": {
            "type": "description",
            "text": "This events describes that the head is mirroring another.\nIn these cases `name` contains the unique name of the matching `zwlr_output_head_v1`.\nIf the name is null, no head is being mirrored onto this one.\n\nFor mirrored heads the `position`-event is meaningless.\n\nIt is only sent if the output is enabled.",
            "summary": "mirroring other output"
          },
          "args": [
            {
              "type": "arg",
              "name": "name",
              "argType": "string",
              "allowNull": "true"
            }
          ]
        },
        {
          "type": "event",
          "name": "adaptive_sync_available",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This events describes if adaptive_sync is available for this head.\n\nIt is only sent if the output is enabled.",
            "summary": "is adaptive_sync available for this head"
          },
          "args": [
            {
              "type": "arg",
              "name": "available",
              "argType": "uint",
              "enum": "adaptive_sync_availability"
            }
          ]
        },
        {
          "type": "event",
          "name": "adaptive_sync_ext",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This events describes the adaptive_sync state of this head.\n\nIt is only sent if the output is enabled.",
            "summary": "current adaptive_sync state"
          },
          "args": [
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "enum": "adaptive_sync_state_ext"
            }
          ]
        },
        {
          "type": "event",
          "name": "xwayland_primary",
          "since": "3",
          "description": {
            "type": "description",
            "text": "This event describes if this head is advertised as the primary output via randr to Xwayland.\n\nAt most one output is marked primary, but it is not guaranteed that any output is marked.\nIt is only sent if the output is enabled.",
            "summary": "is this head configured as the primary for xwayland"
          },
          "args": [
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "summary": "boolean if primary or not"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "adaptive_sync_availability",
          "since": "2",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "unsupported",
              "value": "0",
              "summary": "adaptive sync is not supported"
            },
            {
              "type": "entry",
              "name": "requires_modeset",
              "value": "1",
              "summary": "automatic adaptive_sync is unavailable"
            },
            {
              "type": "entry",
              "name": "supported",
              "value": "2",
              "summary": "adaptive sync is supported in all states"
            }
          ]
        },
        {
          "type": "enum",
          "name": "adaptive_sync_state_ext",
          "since": "2",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "disabled",
              "value": "0",
              "summary": "adaptive sync is disabled"
            },
            {
              "type": "entry",
              "name": "automatic",
              "value": "1",
              "summary": "adaptive sync will be actived automatically"
            },
            {
              "type": "entry",
              "name": "always",
              "value": "2",
              "summary": "adaptive sync is forced to be always active"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zcosmic_output_configuration_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "Extension to zwlr_output_configuration_v1.\n\nAdds additional parameters to be tested/applyed via the original zwlr_output_configuration_v1.",
        "summary": "Output configuration extension object"
      },
      "requests": [
        {
          "type": "request",
          "name": "mirror_head",
          "description": {
            "type": "description",
            "text": "Enable a head mirroring another.\n\nThis request creates a head configuration object that can be used to change the head's properties.\n\nThis is an alternative to `zwlr_output_configuration_v1::enable_head` or `zwlr_output_configuration_v1::disable_head`\nUsing either with the same `head` argument will result in an `already_configured_head` error on the original\n`zwlr_output_configuration_v1` object.\n\nAll properties are still required to be set to the resulting `zwlr_output_configuration_head` by the client\nas denoted in the original protocol. Some like `set_position` however might be ignored in mirroring configurations.\n\nTrying to set a disabled or mirroring head as `mirroring` or calling `disable_head`/`mirror_head` after using a head\nas a `mirroring` argument will raise a `mirrored_head_busy` protocol error.",
            "summary": "enable and configure a head to mirror another head"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "summary": "a new object to configure the head",
              "interface": "zwlr_output_configuration_head_v1",
              "protocol": "wlr-output-management-unstable-v1"
            },
            {
              "type": "arg",
              "name": "head",
              "argType": "object",
              "summary": "the head to be enabled",
              "interface": "zwlr_output_head_v1",
              "protocol": "wlr-output-management-unstable-v1"
            },
            {
              "type": "arg",
              "name": "mirroring",
              "argType": "object",
              "summary": "the head to be mirrored",
              "interface": "zwlr_output_head_v1",
              "protocol": "wlr-output-management-unstable-v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the compositor that it is not going\nto use the configuration object anymore. Any changes to the outputs\nwill still be attached to the original `zwlr_output_configuration_head_v1`\nif it isn't destroyed.",
            "summary": "destroy the output configuration"
          },
          "args": []
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "finished",
          "description": {
            "type": "description",
            "text": "This event indicates that the configuration is no longer available.\n\nThis usually happens when the original configuration was `cancelled`, `suceeded` or `failed`.\n\nUpon receiving this event, the client should destroy this object.\n\nThe configration object becomes inert and any requests other than `destroy` will be ignored.",
            "summary": "the configuration was used"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "already_finished",
              "value": "1",
              "summary": "underlying configuration has already been used"
            },
            {
              "type": "entry",
              "name": "mirrored_head_busy",
              "value": "2",
              "summary": "mirrored head is not enabled"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "zcosmic_output_configuration_head_v1",
      "version": "2",
      "description": {
        "type": "description",
        "text": "Extension to zwlr_output_configuration_head_v1.\n\nAdds additional/alternative parameters to the original zwlr_output_configuration_head_v1.\n\nOnce the original `zwlr_output_configuration_head_v1` is destroyed this object will\nbecome inert and all requests except `release` will be ignored.",
        "summary": "Output configuration head extension object"
      },
      "requests": [
        {
          "type": "request",
          "name": "set_scale_1000",
          "description": {
            "type": "description",
            "text": "This request sets the head's scale multiplied by 1000 for additional precision.\n\nThis request is meant to be used in place of `zwlr_output_configuration_head_v1::set_scale`.\nUsing `set_scale` and `set_scale_1000` at once will thus raise an `already_set` error on the\noriginal `zwlr_output_configuration_head_v1`.\n\nAny request conflicting with `set_scale` will also conflict with `set_scale_1000`.",
            "summary": "set the scale multiplied by 1000"
          },
          "args": [
            {
              "type": "arg",
              "name": "scale_1000",
              "argType": "int"
            }
          ]
        },
        {
          "type": "request",
          "name": "release",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Using this request a client can tell the compositor that it is not going\nto use the configuration object anymore. Already issued requests will\nstill be attached to the original `zwlr_output_configuration_head_v1`\nuntil it is destroyed.",
            "summary": "destroy the output configuration head"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_adaptive_sync_ext",
          "since": "2",
          "description": {
            "type": "description",
            "text": "This request requests a new adaptive sync state.\n\nThis request is meant to be used in place of `zwlr_output_configuration_head_v1::set_adaptive_sync`.\nUsing `set_adaptive_sync` and `set_adaptive_sync_ext` at once will thus raise an `already_set` error on the\noriginal `zwlr_output_configuration_head_v1`.\n\nAny request conflicting with `set_adaptive_sync` will also conflict with `set_adaptive_sync_ext`.",
            "summary": "set adaptive sync state"
          },
          "args": [
            {
              "type": "arg",
              "name": "state",
              "argType": "uint",
              "enum": "zcosmic_output_head_v1.adaptive_sync_state_ext"
            }
          ]
        }
      ],
      "events": [],
      "enums": []
    }
  ]
}
