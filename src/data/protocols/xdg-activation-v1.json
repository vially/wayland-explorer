{"type":"protocol","name":"xdg_activation_v1","copyright":{"type":"copyright","text":"Copyright © 2020 Aleix Pol Gonzalez <aleixpol@kde.org>\n    Copyright © 2020 Carlos Garnacho <carlosg@gnome.org>\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"The way for a client to pass focus to another toplevel is as follows.\n\n    The client that intends to activate another toplevel uses the\n    xdg_activation_v1.get_activation_token request to get an activation token.\n    This token is then forwarded to the client, which is supposed to activate\n    one of its surfaces, through a separate band of communication.\n\n    One established way of doing this is through the XDG_ACTIVATION_TOKEN\n    environment variable of a newly launched child process. The child process\n    should unset the environment variable again right after reading it out in\n    order to avoid propagating it to other child processes.\n\n    Another established way exists for Applications implementing the D-Bus\n    interface org.freedesktop.Application, which should get their token under\n    XDG_ACTIVATION_TOKEN on their platform_data.\n\n    In general activation tokens may be transferred across clients through\n    means not described in this protocol.\n\n    The client to be activated will then pass the token\n    it received to the xdg_activation_v1.activate request. The compositor can\n    then use this token to decide how to react to the activation request.\n\n    The token the activating client gets may be ineffective either already at\n    the time it receives it, for example if it was not focused, for focus\n    stealing prevention. The activating client will have no way to discover\n    the validity of the token, and may still forward it to the to be activated\n    client.\n\n    The created activation token may optionally get information attached to it\n    that can be used by the compositor to identify the application that we\n    intend to activate. This can for example be used to display a visual hint\n    about what application is being started.\n\n    Warning! The protocol described in this file is currently in the testing\n    phase. Backward compatible changes may be added together with the\n    corresponding interface version bump. Backward incompatible changes can\n    only be done by creating a new major version of the extension.","summary":"Protocol for requesting activation of surfaces"},"interfaces":[{"type":"interface","name":"xdg_activation_v1","version":"1","description":{"type":"description","text":"A global interface used for informing the compositor about applications\n      being activated or started, or for applications to request to be\n      activated.","summary":"interface for activating surfaces"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Notify the compositor that the xdg_activation object will no longer be\n        used.\n\n        The child objects created via this interface are unaffected and should\n        be destroyed separately.","summary":"destroy the xdg_activation object"},"args":[]},{"type":"request","name":"get_activation_token","description":{"type":"description","text":"Creates an xdg_activation_token_v1 object that will provide\n        the initiating client with a unique token for this activation. This\n        token should be offered to the clients to be activated.","summary":"requests a token"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"xdg_activation_token_v1"}]},{"type":"request","name":"activate","description":{"type":"description","text":"Requests surface activation. It's up to the compositor to display\n        this information as desired, for example by placing the surface above\n        the rest.\n\n        The compositor may know who requested this by checking the activation\n        token and might decide not to follow through with the activation if it's\n        considered unwanted.\n\n        Compositors can ignore unknown activation tokens when an invalid\n        token is passed.","summary":"notify new interaction being available"},"args":[{"type":"arg","name":"token","argType":"string","summary":"the activation token of the initiating client"},{"type":"arg","name":"surface","argType":"object","summary":"the wl_surface to activate","interface":"wl_surface"}]}],"events":[],"enums":[]},{"type":"interface","name":"xdg_activation_token_v1","version":"1","description":{"type":"description","text":"An object for setting up a token and receiving a token handle that can\n      be passed as an activation token to another client.\n\n      The object is created using the xdg_activation_v1.get_activation_token\n      request. This object should then be populated with the app_id, surface\n      and serial information and committed. The compositor shall then issue a\n      done event with the token. In case the request's parameters are invalid,\n      the compositor will provide an invalid token.","summary":"an exported activation handle"},"requests":[{"type":"request","name":"set_serial","description":{"type":"description","text":"Provides information about the seat and serial event that requested the\n        token.\n\n        The serial can come from an input or focus event. For instance, if a\n        click triggers the launch of a third-party client, the launcher client\n        should send a set_serial request with the serial and seat from the\n        wl_pointer.button event.\n\n        Some compositors might refuse to activate toplevels when the token\n        doesn't have a valid and recent enough event serial.\n\n        Must be sent before commit. This information is optional.","summary":"specifies the seat and serial of the activating event"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"the serial of the event that triggered the activation"},{"type":"arg","name":"seat","argType":"object","summary":"the wl_seat of the event","interface":"wl_seat"}]},{"type":"request","name":"set_app_id","description":{"type":"description","text":"The requesting client can specify an app_id to associate the token\n        being created with it.\n\n        Must be sent before commit. This information is optional.","summary":"specifies the application being activated"},"args":[{"type":"arg","name":"app_id","argType":"string","summary":"the application id of the client being activated."}]},{"type":"request","name":"set_surface","description":{"type":"description","text":"This request sets the surface requesting the activation. Note, this is\n        different from the surface that will be activated.\n\n        Some compositors might refuse to activate toplevels when the token\n        doesn't have a requesting surface.\n\n        Must be sent before commit. This information is optional.","summary":"specifies the surface requesting activation"},"args":[{"type":"arg","name":"surface","argType":"object","summary":"the requesting surface","interface":"wl_surface"}]},{"type":"request","name":"commit","description":{"type":"description","text":"Requests an activation token based on the different parameters that\n        have been offered through set_serial, set_surface and set_app_id.","summary":"issues the token request"},"args":[]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Notify the compositor that the xdg_activation_token_v1 object will no\n        longer be used.","summary":"destroy the xdg_activation_token_v1 object"},"args":[]}],"events":[{"type":"event","name":"done","description":{"type":"description","text":"The 'done' event contains the unique token of this activation request\n        and notifies that the provider is done.","summary":"the exported activation token"},"args":[{"type":"arg","name":"token","argType":"string","summary":"the exported activation token"}]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"already_used","value":"0","summary":"The token has already been used previously"}]}]}]}