{"type":"protocol","name":"linux_dmabuf_unstable_v1","copyright":{"type":"copyright","text":"Copyright Â© 2014, 2015 Collabora, Ltd.\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"interfaces":[{"type":"interface","name":"zwp_linux_dmabuf_v1","version":"4","description":{"type":"description","text":"Following the interfaces from:\n      https://www.khronos.org/registry/egl/extensions/EXT/EGL_EXT_image_dma_buf_import.txt\n      https://www.khronos.org/registry/EGL/extensions/EXT/EGL_EXT_image_dma_buf_import_modifiers.txt\n      and the Linux DRM sub-system's AddFb2 ioctl.\n\n      This interface offers ways to create generic dmabuf-based wl_buffers.\n\n      Clients can use the get_surface_feedback request to get dmabuf feedback\n      for a particular surface. If the client wants to retrieve feedback not\n      tied to a surface, they can use the get_default_feedback request.\n\n      The following are required from clients:\n\n      - Clients must ensure that either all data in the dma-buf is\n        coherent for all subsequent read access or that coherency is\n        correctly handled by the underlying kernel-side dma-buf\n        implementation.\n\n      - Don't make any more attachments after sending the buffer to the\n        compositor. Making more attachments later increases the risk of\n        the compositor not being able to use (re-import) an existing\n        dmabuf-based wl_buffer.\n\n      The underlying graphics stack must ensure the following:\n\n      - The dmabuf file descriptors relayed to the server will stay valid\n        for the whole lifetime of the wl_buffer. This means the server may\n        at any time use those fds to import the dmabuf into any kernel\n        sub-system that might accept it.\n\n      However, when the underlying graphics stack fails to deliver the\n      promise, because of e.g. a device hot-unplug which raises internal\n      errors, after the wl_buffer has been successfully created the\n      compositor must not raise protocol errors to the client when dmabuf\n      import later fails.\n\n      To create a wl_buffer from one or more dmabufs, a client creates a\n      zwp_linux_dmabuf_params_v1 object with a zwp_linux_dmabuf_v1.create_params\n      request. All planes required by the intended format are added with\n      the 'add' request. Finally, a 'create' or 'create_immed' request is\n      issued, which has the following outcome depending on the import success.\n\n      The 'create' request,\n      - on success, triggers a 'created' event which provides the final\n        wl_buffer to the client.\n      - on failure, triggers a 'failed' event to convey that the server\n        cannot use the dmabufs received from the client.\n\n      For the 'create_immed' request,\n      - on success, the server immediately imports the added dmabufs to\n        create a wl_buffer. No event is sent from the server in this case.\n      - on failure, the server can choose to either:\n        - terminate the client by raising a fatal error.\n        - mark the wl_buffer as failed, and send a 'failed' event to the\n          client. If the client uses a failed wl_buffer as an argument to any\n          request, the behaviour is compositor implementation-defined.\n\n      For all DRM formats and unless specified in another protocol extension,\n      pre-multiplied alpha is used for pixel values.\n\n      Warning! The protocol described in this file is experimental and\n      backward incompatible changes may be made. Backward compatible changes\n      may be added together with the corresponding interface version bump.\n      Backward incompatible changes are done by bumping the version number in\n      the protocol and interface names and resetting the interface version.\n      Once the protocol is to be declared stable, the 'z' prefix and the\n      version number in the protocol and interface names are removed and the\n      interface version number is reset.","summary":"factory for creating dmabuf-based wl_buffers"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Objects created through this interface, especially wl_buffers, will\n        remain valid.","summary":"unbind the factory"},"args":[]},{"type":"request","name":"create_params","description":{"type":"description","text":"This temporary object is used to collect multiple dmabuf handles into\n        a single batch to create a wl_buffer. It can only be used once and\n        should be destroyed after a 'created' or 'failed' event has been\n        received.","summary":"create a temporary object for buffer parameters"},"args":[{"type":"arg","name":"params_id","argType":"new_id","summary":"the new temporary","interface":"zwp_linux_buffer_params_v1"}]},{"type":"request","name":"get_default_feedback","since":"4","description":{"type":"description","text":"This request creates a new wp_linux_dmabuf_feedback object not bound\n        to a particular surface. This object will deliver feedback about dmabuf\n        parameters to use if the client doesn't support per-surface feedback\n        (see get_surface_feedback).","summary":"get default feedback"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_linux_dmabuf_feedback_v1"}]},{"type":"request","name":"get_surface_feedback","since":"4","description":{"type":"description","text":"This request creates a new wp_linux_dmabuf_feedback object for the\n        specified wl_surface. This object will deliver feedback about dmabuf\n        parameters to use for buffers attached to this surface.\n\n        If the surface is destroyed before the wp_linux_dmabuf_feedback object,\n        the feedback object becomes inert.","summary":"get feedback for a surface"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_linux_dmabuf_feedback_v1"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]}],"events":[{"type":"event","name":"format","description":{"type":"description","text":"This event advertises one buffer format that the server supports.\n        All the supported formats are advertised once when the client\n        binds to this interface. A roundtrip after binding guarantees\n        that the client has received all supported formats.\n\n        For the definition of the format codes, see the\n        zwp_linux_buffer_params_v1::create request.\n\n        Starting version 4, the format event is deprecated and must not be\n        sent by compositors. Instead, use get_default_feedback or\n        get_surface_feedback.","summary":"supported buffer format"},"args":[{"type":"arg","name":"format","argType":"uint","summary":"DRM_FORMAT code"}]},{"type":"event","name":"modifier","since":"3","description":{"type":"description","text":"This event advertises the formats that the server supports, along with\n        the modifiers supported for each format. All the supported modifiers\n        for all the supported formats are advertised once when the client\n        binds to this interface. A roundtrip after binding guarantees that\n        the client has received all supported format-modifier pairs.\n\n        For legacy support, DRM_FORMAT_MOD_INVALID (that is, modifier_hi ==\n        0x00ffffff and modifier_lo == 0xffffffff) is allowed in this event.\n        It indicates that the server can support the format with an implicit\n        modifier. When a plane has DRM_FORMAT_MOD_INVALID as its modifier, it\n        is as if no explicit modifier is specified. The effective modifier\n        will be derived from the dmabuf.\n\n        A compositor that sends valid modifiers and DRM_FORMAT_MOD_INVALID for\n        a given format supports both explicit modifiers and implicit modifiers.\n\n        For the definition of the format and modifier codes, see the\n        zwp_linux_buffer_params_v1::create and zwp_linux_buffer_params_v1::add\n        requests.\n\n        Starting version 4, the modifier event is deprecated and must not be\n        sent by compositors. Instead, use get_default_feedback or\n        get_surface_feedback.","summary":"supported buffer format modifier"},"args":[{"type":"arg","name":"format","argType":"uint","summary":"DRM_FORMAT code"},{"type":"arg","name":"modifier_hi","argType":"uint","summary":"high 32 bits of layout modifier"},{"type":"arg","name":"modifier_lo","argType":"uint","summary":"low 32 bits of layout modifier"}]}],"enums":[]},{"type":"interface","name":"zwp_linux_buffer_params_v1","version":"4","description":{"type":"description","text":"This temporary object is a collection of dmabufs and other\n      parameters that together form a single logical buffer. The temporary\n      object may eventually create one wl_buffer unless cancelled by\n      destroying it before requesting 'create'.\n\n      Single-planar formats only require one dmabuf, however\n      multi-planar formats may require more than one dmabuf. For all\n      formats, an 'add' request must be called once per plane (even if the\n      underlying dmabuf fd is identical).\n\n      You must use consecutive plane indices ('plane_idx' argument for 'add')\n      from zero to the number of planes used by the drm_fourcc format code.\n      All planes required by the format must be given exactly once, but can\n      be given in any order. Each plane index can be set only once.","summary":"parameters for creating a dmabuf-based wl_buffer"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Cleans up the temporary data sent to the server for dmabuf-based\n        wl_buffer creation.","summary":"delete this object, used or not"},"args":[]},{"type":"request","name":"add","description":{"type":"description","text":"This request adds one dmabuf to the set in this\n        zwp_linux_buffer_params_v1.\n\n        The 64-bit unsigned value combined from modifier_hi and modifier_lo\n        is the dmabuf layout modifier. DRM AddFB2 ioctl calls this the\n        fb modifier, which is defined in drm_mode.h of Linux UAPI.\n        This is an opaque token. Drivers use this token to express tiling,\n        compression, etc. driver-specific modifications to the base format\n        defined by the DRM fourcc code.\n\n        Starting from version 4, the invalid_format protocol error is sent if\n        the format + modifier pair was not advertised as supported.\n\n        This request raises the PLANE_IDX error if plane_idx is too large.\n        The error PLANE_SET is raised if attempting to set a plane that\n        was already set.","summary":"add a dmabuf to the temporary set"},"args":[{"type":"arg","name":"fd","argType":"fd","summary":"dmabuf fd"},{"type":"arg","name":"plane_idx","argType":"uint","summary":"plane index"},{"type":"arg","name":"offset","argType":"uint","summary":"offset in bytes"},{"type":"arg","name":"stride","argType":"uint","summary":"stride in bytes"},{"type":"arg","name":"modifier_hi","argType":"uint","summary":"high 32 bits of layout modifier"},{"type":"arg","name":"modifier_lo","argType":"uint","summary":"low 32 bits of layout modifier"}]},{"type":"request","name":"create","description":{"type":"description","text":"This asks for creation of a wl_buffer from the added dmabuf\n        buffers. The wl_buffer is not created immediately but returned via\n        the 'created' event if the dmabuf sharing succeeds. The sharing\n        may fail at runtime for reasons a client cannot predict, in\n        which case the 'failed' event is triggered.\n\n        The 'format' argument is a DRM_FORMAT code, as defined by the\n        libdrm's drm_fourcc.h. The Linux kernel's DRM sub-system is the\n        authoritative source on how the format codes should work.\n\n        The 'flags' is a bitfield of the flags defined in enum \"flags\".\n        'y_invert' means the that the image needs to be y-flipped.\n\n        Flag 'interlaced' means that the frame in the buffer is not\n        progressive as usual, but interlaced. An interlaced buffer as\n        supported here must always contain both top and bottom fields.\n        The top field always begins on the first pixel row. The temporal\n        ordering between the two fields is top field first, unless\n        'bottom_first' is specified. It is undefined whether 'bottom_first'\n        is ignored if 'interlaced' is not set.\n\n        This protocol does not convey any information about field rate,\n        duration, or timing, other than the relative ordering between the\n        two fields in one buffer. A compositor may have to estimate the\n        intended field rate from the incoming buffer rate. It is undefined\n        whether the time of receiving wl_surface.commit with a new buffer\n        attached, applying the wl_surface state, wl_surface.frame callback\n        trigger, presentation, or any other point in the compositor cycle\n        is used to measure the frame or field times. There is no support\n        for detecting missed or late frames/fields/buffers either, and\n        there is no support whatsoever for cooperating with interlaced\n        compositor output.\n\n        The composited image quality resulting from the use of interlaced\n        buffers is explicitly undefined. A compositor may use elaborate\n        hardware features or software to deinterlace and create progressive\n        output frames from a sequence of interlaced input buffers, or it\n        may produce substandard image quality. However, compositors that\n        cannot guarantee reasonable image quality in all cases are recommended\n        to just reject all interlaced buffers.\n\n        Any argument errors, including non-positive width or height,\n        mismatch between the number of planes and the format, bad\n        format, bad offset or stride, may be indicated by fatal protocol\n        errors: INCOMPLETE, INVALID_FORMAT, INVALID_DIMENSIONS,\n        OUT_OF_BOUNDS.\n\n        Dmabuf import errors in the server that are not obvious client\n        bugs are returned via the 'failed' event as non-fatal. This\n        allows attempting dmabuf sharing and falling back in the client\n        if it fails.\n\n        This request can be sent only once in the object's lifetime, after\n        which the only legal request is destroy. This object should be\n        destroyed after issuing a 'create' request. Attempting to use this\n        object after issuing 'create' raises ALREADY_USED protocol error.\n\n        It is not mandatory to issue 'create'. If a client wants to\n        cancel the buffer creation, it can just destroy this object.","summary":"create a wl_buffer from the given dmabufs"},"args":[{"type":"arg","name":"width","argType":"int","summary":"base plane width in pixels"},{"type":"arg","name":"height","argType":"int","summary":"base plane height in pixels"},{"type":"arg","name":"format","argType":"uint","summary":"DRM_FORMAT code"},{"type":"arg","name":"flags","argType":"uint","summary":"see enum flags","enum":"flags"}]},{"type":"request","name":"create_immed","since":"2","description":{"type":"description","text":"This asks for immediate creation of a wl_buffer by importing the\n        added dmabufs.\n\n        In case of import success, no event is sent from the server, and the\n        wl_buffer is ready to be used by the client.\n\n        Upon import failure, either of the following may happen, as seen fit\n        by the implementation:\n        - the client is terminated with one of the following fatal protocol\n          errors:\n          - INCOMPLETE, INVALID_FORMAT, INVALID_DIMENSIONS, OUT_OF_BOUNDS,\n            in case of argument errors such as mismatch between the number\n            of planes and the format, bad format, non-positive width or\n            height, or bad offset or stride.\n          - INVALID_WL_BUFFER, in case the cause for failure is unknown or\n            plaform specific.\n        - the server creates an invalid wl_buffer, marks it as failed and\n          sends a 'failed' event to the client. The result of using this\n          invalid wl_buffer as an argument in any request by the client is\n          defined by the compositor implementation.\n\n        This takes the same arguments as a 'create' request, and obeys the\n        same restrictions.","summary":"immediately create a wl_buffer from the given\n                     dmabufs"},"args":[{"type":"arg","name":"buffer_id","argType":"new_id","summary":"id for the newly created wl_buffer","interface":"wl_buffer"},{"type":"arg","name":"width","argType":"int","summary":"base plane width in pixels"},{"type":"arg","name":"height","argType":"int","summary":"base plane height in pixels"},{"type":"arg","name":"format","argType":"uint","summary":"DRM_FORMAT code"},{"type":"arg","name":"flags","argType":"uint","summary":"see enum flags","enum":"flags"}]}],"events":[{"type":"event","name":"created","description":{"type":"description","text":"This event indicates that the attempted buffer creation was\n        successful. It provides the new wl_buffer referencing the dmabuf(s).\n\n        Upon receiving this event, the client should destroy the\n        zlinux_dmabuf_params object.","summary":"buffer creation succeeded"},"args":[{"type":"arg","name":"buffer","argType":"new_id","summary":"the newly created wl_buffer","interface":"wl_buffer"}]},{"type":"event","name":"failed","description":{"type":"description","text":"This event indicates that the attempted buffer creation has\n        failed. It usually means that one of the dmabuf constraints\n        has not been fulfilled.\n\n        Upon receiving this event, the client should destroy the\n        zlinux_buffer_params object.","summary":"buffer creation failed"},"args":[]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"already_used","value":"0","summary":"the dmabuf_batch object has already been used to create a wl_buffer"},{"type":"entry","name":"plane_idx","value":"1","summary":"plane index out of bounds"},{"type":"entry","name":"plane_set","value":"2","summary":"the plane index was already set"},{"type":"entry","name":"incomplete","value":"3","summary":"missing or too many planes to create a buffer"},{"type":"entry","name":"invalid_format","value":"4","summary":"format not supported"},{"type":"entry","name":"invalid_dimensions","value":"5","summary":"invalid width or height"},{"type":"entry","name":"out_of_bounds","value":"6","summary":"offset + stride * height goes out of dmabuf bounds"},{"type":"entry","name":"invalid_wl_buffer","value":"7","summary":"invalid wl_buffer resulted from importing dmabufs via\n               the create_immed request on given buffer_params"}]},{"type":"enum","name":"flags","bitfield":true,"entries":[{"type":"entry","name":"y_invert","value":"1","summary":"contents are y-inverted"},{"type":"entry","name":"interlaced","value":"2","summary":"content is interlaced"},{"type":"entry","name":"bottom_first","value":"4","summary":"bottom field first"}]}]},{"type":"interface","name":"zwp_linux_dmabuf_feedback_v1","version":"4","description":{"type":"description","text":"This object advertises dmabuf parameters feedback. This includes the\n      preferred devices and the supported formats/modifiers.\n\n      The parameters are sent once when this object is created and whenever they\n      change. The done event is always sent once after all parameters have been\n      sent. When a single parameter changes, all parameters are re-sent by the\n      compositor.\n\n      Compositors can re-send the parameters when the current client buffer\n      allocations are sub-optimal. Compositors should not re-send the\n      parameters if re-allocating the buffers would not result in a more optimal\n      configuration. In particular, compositors should avoid sending the exact\n      same parameters multiple times in a row.\n\n      The tranche_target_device and tranche_modifier events are grouped by\n      tranches of preference. For each tranche, a tranche_target_device, one\n      tranche_flags and one or more tranche_modifier events are sent, followed\n      by a tranche_done event finishing the list. The tranches are sent in\n      descending order of preference. All formats and modifiers in the same\n      tranche have the same preference.\n\n      To send parameters, the compositor sends one main_device event, tranches\n      (each consisting of one tranche_target_device event, one tranche_flags\n      event, tranche_modifier events and then a tranche_done event), then one\n      done event.","summary":"dmabuf feedback"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Using this request a client can tell the server that it is not going to\n        use the wp_linux_dmabuf_feedback object anymore.","summary":"destroy the feedback object"},"args":[]}],"events":[{"type":"event","name":"done","description":{"type":"description","text":"This event is sent after all parameters of a wp_linux_dmabuf_feedback\n        object have been sent.\n\n        This allows changes to the wp_linux_dmabuf_feedback parameters to be\n        seen as atomic, even if they happen via multiple events.","summary":"all feedback has been sent"},"args":[]},{"type":"event","name":"format_table","description":{"type":"description","text":"This event provides a file descriptor which can be memory-mapped to\n        access the format and modifier table.\n\n        The table contains a tightly packed array of consecutive format +\n        modifier pairs. Each pair is 16 bytes wide. It contains a format as a\n        32-bit unsigned integer, followed by 4 bytes of unused padding, and a\n        modifier as a 64-bit unsigned integer. The native endianness is used.\n\n        The client must map the file descriptor in read-only private mode.\n\n        Compositors are not allowed to mutate the table file contents once this\n        event has been sent. Instead, compositors must create a new, separate\n        table file and re-send feedback parameters. Compositors are allowed to\n        store duplicate format + modifier pairs in the table.","summary":"format and modifier table"},"args":[{"type":"arg","name":"fd","argType":"fd","summary":"table file descriptor"},{"type":"arg","name":"size","argType":"uint","summary":"table size, in bytes"}]},{"type":"event","name":"main_device","description":{"type":"description","text":"This event advertises the main device that the server prefers to use\n        when direct scan-out to the target device isn't possible. The\n        advertised main device may be different for each\n        wp_linux_dmabuf_feedback object, and may change over time.\n\n        There is exactly one main device. The compositor must send at least\n        one preference tranche with tranche_target_device equal to main_device.\n\n        Clients need to create buffers that the main device can import and\n        read from, otherwise creating the dmabuf wl_buffer will fail (see the\n        wp_linux_buffer_params.create and create_immed requests for details).\n        The main device will also likely be kept active by the compositor,\n        so clients can use it instead of waking up another device for power\n        savings.\n\n        In general the device is a DRM node. The DRM node type (primary vs.\n        render) is unspecified. Clients must not rely on the compositor sending\n        a particular node type. Clients cannot check two devices for equality\n        by comparing the dev_t value.\n\n        If explicit modifiers are not supported and the client performs buffer\n        allocations on a different device than the main device, then the client\n        must force the buffer to have a linear layout.","summary":"preferred main device"},"args":[{"type":"arg","name":"device","argType":"array","summary":"device dev_t value"}]},{"type":"event","name":"tranche_done","description":{"type":"description","text":"This event splits tranche_target_device and tranche_modifier events in\n        preference tranches. It is sent after a set of tranche_target_device\n        and tranche_modifier events; it represents the end of a tranche. The\n        next tranche will have a lower preference.","summary":"a preference tranche has been sent"},"args":[]},{"type":"event","name":"tranche_target_device","description":{"type":"description","text":"This event advertises the target device that the server prefers to use\n        for a buffer created given this tranche. The advertised target device\n        may be different for each preference tranche, and may change over time.\n\n        There is exactly one target device per tranche.\n\n        The target device may be a scan-out device, for example if the\n        compositor prefers to directly scan-out a buffer created given this\n        tranche. The target device may be a rendering device, for example if\n        the compositor prefers to texture from said buffer.\n\n        The client can use this hint to allocate the buffer in a way that makes\n        it accessible from the target device, ideally directly. The buffer must\n        still be accessible from the main device, either through direct import\n        or through a potentially more expensive fallback path. If the buffer\n        can't be directly imported from the main device then clients must be\n        prepared for the compositor changing the tranche priority or making\n        wl_buffer creation fail (see the wp_linux_buffer_params.create and\n        create_immed requests for details).\n\n        If the device is a DRM node, the DRM node type (primary vs. render) is\n        unspecified. Clients must not rely on the compositor sending a\n        particular node type. Clients cannot check two devices for equality by\n        comparing the dev_t value.\n\n        This event is tied to a preference tranche, see the tranche_done event.","summary":"target device"},"args":[{"type":"arg","name":"device","argType":"array","summary":"device dev_t value"}]},{"type":"event","name":"tranche_formats","description":{"type":"description","text":"This event advertises the format + modifier combinations that the\n        compositor supports.\n\n        It carries an array of indices, each referring to a format + modifier\n        pair in the last received format table (see the format_table event).\n        Each index is a 16-bit unsigned integer in native endianness.\n\n        For legacy support, DRM_FORMAT_MOD_INVALID is an allowed modifier.\n        It indicates that the server can support the format with an implicit\n        modifier. When a buffer has DRM_FORMAT_MOD_INVALID as its modifier, it\n        is as if no explicit modifier is specified. The effective modifier\n        will be derived from the dmabuf.\n\n        A compositor that sends valid modifiers and DRM_FORMAT_MOD_INVALID for\n        a given format supports both explicit modifiers and implicit modifiers.\n\n        Compositors must not send duplicate format + modifier pairs within the\n        same tranche or across two different tranches with the same target\n        device and flags.\n\n        This event is tied to a preference tranche, see the tranche_done event.\n\n        For the definition of the format and modifier codes, see the\n        wp_linux_buffer_params.create request.","summary":"supported buffer format modifier"},"args":[{"type":"arg","name":"indices","argType":"array","summary":"array of 16-bit indexes"}]},{"type":"event","name":"tranche_flags","description":{"type":"description","text":"This event sets tranche-specific flags.\n\n        The scanout flag is a hint that direct scan-out may be attempted by the\n        compositor on the target device if the client appropriately allocates a\n        buffer. How to allocate a buffer that can be scanned out on the target\n        device is implementation-defined.\n\n        This event is tied to a preference tranche, see the tranche_done event.","summary":"tranche flags"},"args":[{"type":"arg","name":"flags","argType":"uint","summary":"tranche flags","enum":"tranche_flags"}]}],"enums":[{"type":"enum","name":"tranche_flags","bitfield":true,"entries":[{"type":"entry","name":"scanout","value":"1","summary":"direct scan-out tranche"}]}]}]}