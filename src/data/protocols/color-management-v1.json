{
  "type": "protocol",
  "name": "color_management_v1",
  "copyright": {
    "type": "copyright",
    "text": "Copyright 2019 Sebastian Wick\nCopyright 2019 Erwin Burema\nCopyright 2020 AMD\nCopyright 2020-2024 Collabora, Ltd.\nCopyright 2024 Xaver Hugl\nCopyright 2022-2025 Red Hat, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "description": {
    "type": "description",
    "text": "The aim of the color management extension is to allow clients to know\nthe color properties of outputs, and to tell the compositor about the color\nproperties of their content on surfaces. Doing this enables a compositor\nto perform automatic color management of content for different outputs\naccording to how content is intended to look like.\n\nThe color properties are represented as an image description object which\nis immutable after it has been created. A wl_output always has an\nassociated image description that clients can observe. A wl_surface\nalways has an associated preferred image description as a hint chosen by\nthe compositor that clients can also observe. Clients can set an image\ndescription on a wl_surface to denote the color characteristics of the\nsurface contents.\n\nAn image description includes SDR and HDR colorimetry and encoding, HDR\nmetadata, and viewing environment parameters. An image description does\nnot include the properties set through color-representation extension.\nIt is expected that the color-representation extension is used in\nconjunction with the color management extension when necessary,\nparticularly with the YUV family of pixel formats.\n\nRecommendation ITU-T H.273\n\"Coding-independent code points for video signal type identification\"\nshall be referred to as simply H.273 here.\n\nThe color-and-hdr repository\n(https://gitlab.freedesktop.org/pq/color-and-hdr) contains\nbackground information on the protocol design and legacy color management.\nIt also contains a glossary, learning resources for digital color, tools,\nsamples and more.\n\nThe terminology used in this protocol is based on common color science and\ncolor encoding terminology where possible. The glossary in the color-and-hdr\nrepository shall be the authority on the definition of terms in this\nprotocol.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.",
    "summary": "color management protocol"
  },
  "interfaces": [
    {
      "type": "interface",
      "name": "wp_color_manager_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A singleton global interface used for getting color management extensions\nfor wl_surface and wl_output objects, and for creating client defined\nimage description objects. The extension interfaces allow\ngetting the image description of outputs and setting the image\ndescription of surfaces.\n\nCompositors should never remove this global.",
        "summary": "color manager singleton"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the wp_color_manager_v1 object. This does not affect any other\nobjects in any way.",
            "summary": "destroy the color manager"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_output",
          "description": {
            "type": "description",
            "text": "This creates a new wp_color_management_output_v1 object for the\ngiven wl_output.\n\nSee the wp_color_management_output_v1 interface for more details.",
            "summary": "create a color management interface for a wl_output"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wp_color_management_output_v1"
            },
            {
              "type": "arg",
              "name": "output",
              "argType": "object",
              "interface": "wl_output",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_surface",
          "description": {
            "type": "description",
            "text": "If a wp_color_management_surface_v1 object already exists for the given\nwl_surface, the protocol error surface_exists is raised.\n\nThis creates a new color wp_color_management_surface_v1 object for the\ngiven wl_surface.\n\nSee the wp_color_management_surface_v1 interface for more details.",
            "summary": "create a color management interface for a wl_surface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wp_color_management_surface_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_surface_feedback",
          "description": {
            "type": "description",
            "text": "This creates a new color wp_color_management_surface_feedback_v1 object\nfor the given wl_surface.\n\nSee the wp_color_management_surface_feedback_v1 interface for more\ndetails.",
            "summary": "create a color management feedback interface"
          },
          "args": [
            {
              "type": "arg",
              "name": "id",
              "argType": "new_id",
              "interface": "wp_color_management_surface_feedback_v1"
            },
            {
              "type": "arg",
              "name": "surface",
              "argType": "object",
              "interface": "wl_surface",
              "protocol": "wayland"
            }
          ]
        },
        {
          "type": "request",
          "name": "create_icc_creator",
          "description": {
            "type": "description",
            "text": "Makes a new ICC-based image description creator object with all\nproperties initially unset. The client can then use the object's\ninterface to define all the required properties for an image description\nand finally create a wp_image_description_v1 object.\n\nThis request can be used when the compositor advertises\nwp_color_manager_v1.feature.icc_v2_v4.\nOtherwise this request raises the protocol error unsupported_feature.",
            "summary": "make a new ICC-based image description creator object"
          },
          "args": [
            {
              "type": "arg",
              "name": "obj",
              "argType": "new_id",
              "summary": "the new creator object",
              "interface": "wp_image_description_creator_icc_v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "create_parametric_creator",
          "description": {
            "type": "description",
            "text": "Makes a new parametric image description creator object with all\nproperties initially unset. The client can then use the object's\ninterface to define all the required properties for an image description\nand finally create a wp_image_description_v1 object.\n\nThis request can be used when the compositor advertises\nwp_color_manager_v1.feature.parametric.\nOtherwise this request raises the protocol error unsupported_feature.",
            "summary": "make a new parametric image description creator object"
          },
          "args": [
            {
              "type": "arg",
              "name": "obj",
              "argType": "new_id",
              "summary": "the new creator object",
              "interface": "wp_image_description_creator_params_v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "create_windows_scrgb",
          "description": {
            "type": "description",
            "text": "This creates a pre-defined image description for the so-called\nWindows-scRGB stimulus encoding. This comes from the Windows 10 handling\nof its own definition of an scRGB color space for an HDR screen\ndriven in BT.2100/PQ signalling mode.\n\nWindows-scRGB uses sRGB (BT.709) color primaries and white point.\nThe transfer characteristic is extended linear.\n\nThe nominal color channel value range is extended, meaning it includes\nnegative and greater than 1.0 values. Negative values are used to\nescape the sRGB color gamut boundaries. To make use of the extended\nrange, the client needs to use a pixel format that can represent those\nvalues, e.g. floating-point 16 bits per channel.\n\nNominal color value R=G=B=0.0 corresponds to BT.2100/PQ system\n0 cd/m², and R=G=B=1.0 corresponds to BT.2100/PQ system 80 cd/m².\nThe maximum is R=G=B=125.0 corresponding to 10k cd/m².\n\nWindows-scRGB is displayed by Windows 10 by converting it to\nBT.2100/PQ, maintaining the CIE 1931 chromaticity and mapping the\nluminance as above. No adjustment is made to the signal to account\nfor the viewing conditions.\n\nThe reference white level of Windows-scRGB is unknown. If a\nreference white level must be assumed for compositor processing, it\nshould be R=G=B=2.5375 corresponding to 203 cd/m² of Report ITU-R\nBT.2408-7.\n\nThe target color volume of Windows-scRGB is unknown. The color gamut\nmay be anything between sRGB and BT.2100.\n\nNote: EGL_EXT_gl_colorspace_scrgb_linear definition differs from\nWindows-scRGB by using R=G=B=1.0 as the reference white level, while\nWindows-scRGB reference white level is unknown or varies. However,\nit seems probable that Windows implements both\nEGL_EXT_gl_colorspace_scrgb_linear and Vulkan\nVK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT as Windows-scRGB.\n\nThis request can be used when the compositor advertises\nwp_color_manager_v1.feature.windows_scrgb.\nOtherwise this request raises the protocol error unsupported_feature.\n\nThe resulting image description object does not allow get_information\nrequest. The wp_image_description_v1.ready event shall be sent.",
            "summary": "create Windows-scRGB image description object"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "new_id",
              "interface": "wp_image_description_v1"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "supported_intent",
          "description": {
            "type": "description",
            "text": "When this object is created, it shall immediately send this event once\nfor each rendering intent the compositor supports.",
            "summary": "supported rendering intent"
          },
          "args": [
            {
              "type": "arg",
              "name": "render_intent",
              "argType": "uint",
              "summary": "rendering intent",
              "enum": "render_intent"
            }
          ]
        },
        {
          "type": "event",
          "name": "supported_feature",
          "description": {
            "type": "description",
            "text": "When this object is created, it shall immediately send this event once\nfor each compositor supported feature listed in the enumeration.",
            "summary": "supported features"
          },
          "args": [
            {
              "type": "arg",
              "name": "feature",
              "argType": "uint",
              "summary": "supported feature",
              "enum": "feature"
            }
          ]
        },
        {
          "type": "event",
          "name": "supported_tf_named",
          "description": {
            "type": "description",
            "text": "When this object is created, it shall immediately send this event once\nfor each named transfer function the compositor supports with the\nparametric image description creator.",
            "summary": "supported named transfer characteristic"
          },
          "args": [
            {
              "type": "arg",
              "name": "tf",
              "argType": "uint",
              "summary": "Named transfer function",
              "enum": "transfer_function"
            }
          ]
        },
        {
          "type": "event",
          "name": "supported_primaries_named",
          "description": {
            "type": "description",
            "text": "When this object is created, it shall immediately send this event once\nfor each named set of primaries the compositor supports with the\nparametric image description creator.",
            "summary": "supported named primaries"
          },
          "args": [
            {
              "type": "arg",
              "name": "primaries",
              "argType": "uint",
              "summary": "Named color primaries",
              "enum": "primaries"
            }
          ]
        },
        {
          "type": "event",
          "name": "done",
          "description": {
            "type": "description",
            "text": "This event is sent when all supported rendering intents, features,\ntransfer functions and named primaries have been sent.",
            "summary": "all features have been sent"
          },
          "args": []
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "entries": [
            {
              "type": "entry",
              "name": "unsupported_feature",
              "value": "0",
              "summary": "request not supported"
            },
            {
              "type": "entry",
              "name": "surface_exists",
              "value": "1",
              "summary": "color management surface exists already"
            }
          ]
        },
        {
          "type": "enum",
          "name": "render_intent",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "See the ICC.1:2022 specification from the International Color Consortium\nfor more details about rendering intents.\n\nThe principles of ICC defined rendering intents apply with all types of\nimage descriptions, not only those with ICC file profiles.\n\nCompositors must support the perceptual rendering intent. Other\nrendering intents are optional.",
            "summary": "rendering intents"
          },
          "entries": [
            {
              "type": "entry",
              "name": "perceptual",
              "value": "0",
              "summary": "perceptual"
            },
            {
              "type": "entry",
              "name": "relative",
              "value": "1",
              "summary": "media-relative colorimetric"
            },
            {
              "type": "entry",
              "name": "saturation",
              "value": "2",
              "summary": "saturation"
            },
            {
              "type": "entry",
              "name": "absolute",
              "value": "3",
              "summary": "ICC-absolute colorimetric"
            },
            {
              "type": "entry",
              "name": "relative_bpc",
              "value": "4",
              "summary": "media-relative colorimetric + black point compensation"
            }
          ]
        },
        {
          "type": "enum",
          "name": "feature",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "compositor supported features"
          },
          "entries": [
            {
              "type": "entry",
              "name": "icc_v2_v4",
              "value": "0",
              "summary": "create_icc_creator request"
            },
            {
              "type": "entry",
              "name": "parametric",
              "value": "1",
              "summary": "create_parametric_creator request"
            },
            {
              "type": "entry",
              "name": "set_primaries",
              "value": "2",
              "summary": "parametric set_primaries request"
            },
            {
              "type": "entry",
              "name": "set_tf_power",
              "value": "3",
              "summary": "parametric set_tf_power request"
            },
            {
              "type": "entry",
              "name": "set_luminances",
              "value": "4",
              "summary": "parametric set_luminances request"
            },
            {
              "type": "entry",
              "name": "set_mastering_display_primaries",
              "value": "5",
              "description": {
                "type": "description",
                "text": "The compositor supports set_mastering_display_primaries request with a\ntarget color volume fully contained inside the primary color volume.",
                "summary": "parametric set_mastering_display_primaries request"
              }
            },
            {
              "type": "entry",
              "name": "extended_target_volume",
              "value": "6",
              "description": {
                "type": "description",
                "text": "The compositor additionally supports target color volumes that\nextend outside of the primary color volume.\n\nThis can only be advertised if feature set_mastering_display_primaries\nis supported as well.",
                "summary": "parametric target exceeds primary color volume"
              }
            },
            {
              "type": "entry",
              "name": "windows_scrgb",
              "value": "7",
              "summary": "get_windows_scrgb request"
            }
          ]
        },
        {
          "type": "enum",
          "name": "primaries",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Named color primaries used to encode well-known sets of primaries. H.273\nis the authority, when it comes to the exact values of primaries and\nauthoritative specifications, where an equivalent code point exists.\n\nA value of 0 is invalid and will never be present in the list of enums.\n\nDescriptions do list the specifications for convenience.",
            "summary": "named color primaries"
          },
          "entries": [
            {
              "type": "entry",
              "name": "srgb",
              "value": "1",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by\n- Rec. ITU-R BT.709-6\n- Rec. ITU-R BT.1361-0 conventional colour gamut system and extended\ncolour gamut system (historical)\n- IEC 61966-2-1 sRGB or sYCC\n- IEC 61966-2-4\n- Society of Motion Picture and Television Engineers (SMPTE) RP 177\n(1993) Annex B\nEquivalent to H.273 ColourPrimaries code point 1.",
                "summary": "Color primaries for the sRGB color space as defined by the BT.709 standard"
              }
            },
            {
              "type": "entry",
              "name": "pal_m",
              "value": "2",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by\n- Rec. ITU-R BT.470-6 System M (historical)\n- United States National Television System Committee 1953\nRecommendation for transmission standards for color television\n- United States Federal Communications Commission (2003) Title 47 Code\nof Federal Regulations 73.682 (a)(20)\nEquivalent to H.273 ColourPrimaries code point 4.",
                "summary": "Color primaries for PAL-M as defined by the BT.470 standard"
              }
            },
            {
              "type": "entry",
              "name": "pal",
              "value": "3",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by\n- Rec. ITU-R BT.470-6 System B, G (historical)\n- Rec. ITU-R BT.601-7 625\n- Rec. ITU-R BT.1358-0 625 (historical)\n- Rec. ITU-R BT.1700-0 625 PAL and 625 SECAM\nEquivalent to H.273 ColourPrimaries code point 5.",
                "summary": "Color primaries for PAL as defined by the BT.601 standard"
              }
            },
            {
              "type": "entry",
              "name": "ntsc",
              "value": "4",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by\n- Rec. ITU-R BT.601-7 525\n- Rec. ITU-R BT.1358-1 525 or 625 (historical)\n- Rec. ITU-R BT.1700-0 NTSC\n- SMPTE 170M (2004)\n- SMPTE 240M (1999) (historical)\nEquivalent to H.273 ColourPrimaries code point 6 and 7.",
                "summary": "Color primaries for NTSC as defined by the BT.601 standard"
              }
            },
            {
              "type": "entry",
              "name": "generic_film",
              "value": "5",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by H.273 for generic film.\nEquivalent to H.273 ColourPrimaries code point 8.",
                "summary": "Generic film with colour filters using Illuminant C"
              }
            },
            {
              "type": "entry",
              "name": "bt2020",
              "value": "6",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by\n- Rec. ITU-R BT.2020-2\n- Rec. ITU-R BT.2100-0\nEquivalent to H.273 ColourPrimaries code point 9.",
                "summary": "Color primaries as defined by the BT.2020 and BT.2100 standard"
              }
            },
            {
              "type": "entry",
              "name": "cie1931_xyz",
              "value": "7",
              "description": {
                "type": "description",
                "text": "Color primaries as defined as the maximum of the CIE 1931 XYZ color\nspace by\n- SMPTE ST 428-1\n- (CIE 1931 XYZ as in ISO 11664-1)\nEquivalent to H.273 ColourPrimaries code point 10.",
                "summary": "Color primaries of the full CIE 1931 XYZ color space"
              }
            },
            {
              "type": "entry",
              "name": "dci_p3",
              "value": "8",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by Digital Cinema System and published in\nSMPTE RP 431-2 (2011). Equivalent to H.273 ColourPrimaries code point\n11.",
                "summary": "Color primaries of the DCI P3 color space as defined by the SMPTE RP 431 standard"
              }
            },
            {
              "type": "entry",
              "name": "display_p3",
              "value": "9",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by Digital Cinema System and published in\nSMPTE EG 432-1 (2010).\nEquivalent to H.273 ColourPrimaries code point 12.",
                "summary": "Color primaries of Display P3 variant of the DCI-P3 color space as defined by the SMPTE EG 432 standard"
              }
            },
            {
              "type": "entry",
              "name": "adobe_rgb",
              "value": "10",
              "description": {
                "type": "description",
                "text": "Color primaries as defined by Adobe as \"Adobe RGB\" and later published\nby ISO 12640-4 (2011).",
                "summary": "Color primaries of the Adobe RGB color space as defined by the ISO 12640 standard"
              }
            }
          ]
        },
        {
          "type": "enum",
          "name": "transfer_function",
          "bitfield": false,
          "description": {
            "type": "description",
            "text": "Named transfer functions used to represent well-known transfer\ncharacteristics. H.273 is the authority, when it comes to the exact\nformulas and authoritative specifications, where an equivalent code\npoint exists.\n\nA value of 0 is invalid and will never be present in the list of enums.\n\nDescriptions do list the specifications for convenience.",
            "summary": "named transfer functions"
          },
          "entries": [
            {
              "type": "entry",
              "name": "bt1886",
              "value": "1",
              "description": {
                "type": "description",
                "text": "Rec. ITU-R BT.1886 is the display transfer characteristic assumed by\n- Rec. ITU-R BT.601-7 525 and 625\n- Rec. ITU-R BT.709-6\n- Rec. ITU-R BT.2020-2\nThese recommendations are referred to by H.273 TransferCharacteristics\ncode points 1, 6, 14, and 15, which are all equivalent.\n\nThis TF implies these default luminances from Rec. ITU-R BT.2035:\n- primary color volume minimum: 0.01 cd/m²\n- primary color volume maximum: 100 cd/m²\n- reference white: 100 cd/m²",
                "summary": "BT.1886 display transfer characteristic"
              }
            },
            {
              "type": "entry",
              "name": "gamma22",
              "value": "2",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- Rec. ITU-R BT.470-6 System M (historical)\n- United States National Television System Committee 1953\nRecommendation for transmission standards for color television\n- United States Federal Communications Commission (2003) Title 47 Code\nof Federal Regulations 73.682 (a) (20)\n- Rec. ITU-R BT.1700-0 625 PAL and 625 SECAM\nEquivalent to H.273 TransferCharacteristics code point 4.",
                "summary": "Assumed display gamma 2.2 transfer function"
              }
            },
            {
              "type": "entry",
              "name": "gamma28",
              "value": "3",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- Rec. ITU-R BT.470-6 System B, G (historical)\nEquivalent to H.273 TransferCharacteristics code point 5.",
                "summary": "Assumed display gamma 2.8 transfer function"
              }
            },
            {
              "type": "entry",
              "name": "st240",
              "value": "4",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- SMPTE ST 240 (1999)\nEquivalent to H.273 TransferCharacteristics code point 7.",
                "summary": "SMPTE ST 240 transfer function"
              }
            },
            {
              "type": "entry",
              "name": "ext_linear",
              "value": "5",
              "description": {
                "type": "description",
                "text": "Linear transfer function defined over all real numbers.\nNormalised electrical values are equal the normalised optical values.\n\nThe differences to H.273 TransferCharacteristics code point 8 are\nthe definition over all real numbers.",
                "summary": "extended linear transfer function"
              }
            },
            {
              "type": "entry",
              "name": "log_100",
              "value": "6",
              "description": {
                "type": "description",
                "text": "Logarithmic transfer characteristic (100:1 range).\nEquivalent to H.273 TransferCharacteristics code point 9.",
                "summary": "logarithmic 100:1 transfer function"
              }
            },
            {
              "type": "entry",
              "name": "log_316",
              "value": "7",
              "description": {
                "type": "description",
                "text": "Logarithmic transfer characteristic (100 * Sqrt(10) : 1 range).\nEquivalent to H.273 TransferCharacteristics code point 10.",
                "summary": "logarithmic (100*Sqrt(10) : 1) transfer function"
              }
            },
            {
              "type": "entry",
              "name": "xvycc",
              "value": "8",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- IEC 61966-2-4\nEquivalent to H.273 TransferCharacteristics code point 11.",
                "summary": "IEC 61966-2-4 transfer function"
              }
            },
            {
              "type": "entry",
              "name": "srgb",
              "value": "9",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- IEC 61966-2-1 sRGB\nEquivalent to H.273 TransferCharacteristics code point 13 with\nMatrixCoefficients set to 0.",
                "summary": "sRGB piece-wise transfer function"
              }
            },
            {
              "type": "entry",
              "name": "ext_srgb",
              "value": "10",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- IEC 61966-2-1 sYCC\nEquivalent to H.273 TransferCharacteristics code point 13 with\nMatrixCoefficients set to anything but 0.",
                "summary": "Extended sRGB piece-wise transfer function"
              }
            },
            {
              "type": "entry",
              "name": "st2084_pq",
              "value": "11",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- SMPTE ST 2084 (2014) for 10-, 12-, 14- and 16-bit systems\n- Rec. ITU-R BT.2100-2 perceptual quantization (PQ) system\nEquivalent to H.273 TransferCharacteristics code point 16.\n\nThis TF implies these default luminances\n- primary color volume minimum: 0.005 cd/m²\n- primary color volume maximum: 10000 cd/m²\n- reference white: 203 cd/m²\n\nThe difference between the primary color volume minimum and maximum\nmust be approximately 10000 cd/m² as that is the swing of the EOTF\ndefined by ST 2084 and BT.2100. The default value for the\nreference white is a protocol addition: it is suggested by\nReport ITU-R BT.2408-7 and is not part of ST 2084 or BT.2100.",
                "summary": "perceptual quantizer transfer function"
              }
            },
            {
              "type": "entry",
              "name": "st428",
              "value": "12",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- SMPTE ST 428-1 (2019)\nEquivalent to H.273 TransferCharacteristics code point 17.",
                "summary": "SMPTE ST 428 transfer function"
              }
            },
            {
              "type": "entry",
              "name": "hlg",
              "value": "13",
              "description": {
                "type": "description",
                "text": "Transfer characteristics as defined by\n- ARIB STD-B67 (2015)\n- Rec. ITU-R BT.2100-2 hybrid log-gamma (HLG) system\nEquivalent to H.273 TransferCharacteristics code point 18.\n\nThis TF implies these default luminances\n- primary color volume minimum: 0.005 cd/m²\n- primary color volume maximum: 1000 cd/m²\n- reference white: 203 cd/m²\n\nHLG is a relative display-referred signal with a specified\nnon-linear mapping to the display peak luminance (the HLG OOTF).\nAll absolute luminance values used here for HLG assume a 1000 cd/m²\npeak display.\n\nThe default value for the reference white is a protocol addition:\nit is suggested by Report ITU-R BT.2408-7 and is not part of\nARIB STD-B67 or BT.2100.",
                "summary": "hybrid log-gamma transfer function"
              }
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_color_management_output_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A wp_color_management_output_v1 describes the color properties of an\noutput.\n\nThe wp_color_management_output_v1 is associated with the wl_output global\nunderlying the wl_output object. Therefore the client destroying the\nwl_output object has no impact, but the compositor removing the output\nglobal makes the wp_color_management_output_v1 object inert.",
        "summary": "output color properties"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the color wp_color_management_output_v1 object. This does not\naffect any remaining protocol objects.",
            "summary": "destroy the color management output"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_image_description",
          "description": {
            "type": "description",
            "text": "This creates a new wp_image_description_v1 object for the current image\ndescription of the output. There always is exactly one image description\nactive for an output so the client should destroy the image description\ncreated by earlier invocations of this request. This request is usually\nsent as a reaction to the image_description_changed event or when\ncreating a wp_color_management_output_v1 object.\n\nThe image description of an output represents the color encoding the\noutput expects. There might be performance and power advantages, as well\nas improved color reproduction, if a content update matches the image\ndescription of the output it is being shown on. If a content update is\nshown on any other output than the one it matches the image description\nof, then the color reproduction on those outputs might be considerably\nworse.\n\nThe created wp_image_description_v1 object preserves the image\ndescription of the output from the time the object was created.\n\nThe resulting image description object allows get_information request.\n\nIf this protocol object is inert, the resulting image description object\nshall immediately deliver the wp_image_description_v1.failed event with\nthe no_output cause.\n\nIf the interface version is inadequate for the output's image\ndescription, meaning that the client does not support all the events\nneeded to deliver the crucial information, the resulting image\ndescription object shall immediately deliver the\nwp_image_description_v1.failed event with the low_version cause.\n\nOtherwise the object shall immediately deliver the ready event.",
            "summary": "get the image description of the output"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "new_id",
              "interface": "wp_image_description_v1"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "image_description_changed",
          "description": {
            "type": "description",
            "text": "This event is sent whenever the image description of the output changed,\nfollowed by one wl_output.done event common to output events across all\nextensions.\n\nIf the client wants to use the updated image description, it needs to do\nget_image_description again, because image description objects are\nimmutable.",
            "summary": "image description changed"
          },
          "args": []
        }
      ],
      "enums": []
    },
    {
      "type": "interface",
      "name": "wp_color_management_surface_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A wp_color_management_surface_v1 allows the client to set the color\nspace and HDR properties of a surface.\n\nIf the wl_surface associated with the wp_color_management_surface_v1 is\ndestroyed, the wp_color_management_surface_v1 object becomes inert.",
        "summary": "color management extension to a surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the wp_color_management_surface_v1 object and do the same as\nunset_image_description.",
            "summary": "destroy the color management interface for a surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "set_image_description",
          "description": {
            "type": "description",
            "text": "If this protocol object is inert, the protocol error inert is raised.\n\nSet the image description of the underlying surface. The image\ndescription and rendering intent are double-buffered state, see\nwl_surface.commit.\n\nIt is the client's responsibility to understand the image description\nit sets on a surface, and to provide content that matches that image\ndescription. Compositors might convert images to match their own or any\nother image descriptions.\n\nImage descriptions which are not ready (see wp_image_description_v1)\nare forbidden in this request, and in such case the protocol error\nimage_description is raised.\n\nAll image descriptions which are ready (see wp_image_description_v1)\nare allowed and must always be accepted by the compositor.\n\nA rendering intent provides the client's preference on how content\ncolors should be mapped to each output. The render_intent value must\nbe one advertised by the compositor with\nwp_color_manager_v1.render_intent event, otherwise the protocol error\nrender_intent is raised.\n\nWhen an image description is set on a surface, the Transfer\nCharacteristics of the image description defines the valid range of\nthe nominal (real-valued) color channel values. The processing of\nout-of-range color channel values is undefined, but compositors are\nrecommended to clamp the values to the valid range when possible.\n\nBy default, a surface does not have an associated image description\nnor a rendering intent. The handling of color on such surfaces is\ncompositor implementation defined. Compositors should handle such\nsurfaces as sRGB, but may handle them differently if they have specific\nrequirements.\n\nSetting the image description has copy semantics; after this request,\nthe image description can be immediately destroyed without affecting\nthe pending state of the surface.",
            "summary": "set the surface image description"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "object",
              "interface": "wp_image_description_v1"
            },
            {
              "type": "arg",
              "name": "render_intent",
              "argType": "uint",
              "summary": "rendering intent",
              "enum": "wp_color_manager_v1.render_intent"
            }
          ]
        },
        {
          "type": "request",
          "name": "unset_image_description",
          "description": {
            "type": "description",
            "text": "If this protocol object is inert, the protocol error inert is raised.\n\nThis request removes any image description from the surface. See\nset_image_description for how a compositor handles a surface without\nan image description. This is double-buffered state, see\nwl_surface.commit.",
            "summary": "remove the surface image description"
          },
          "args": []
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "protocol errors"
          },
          "entries": [
            {
              "type": "entry",
              "name": "render_intent",
              "value": "0",
              "summary": "unsupported rendering intent"
            },
            {
              "type": "entry",
              "name": "image_description",
              "value": "1",
              "summary": "invalid image description"
            },
            {
              "type": "entry",
              "name": "inert",
              "value": "2",
              "summary": "forbidden request on inert object"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_color_management_surface_feedback_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "A wp_color_management_surface_feedback_v1 allows the client to get the\npreferred image description of a surface.\n\nIf the wl_surface associated with this object is destroyed, the\nwp_color_management_surface_feedback_v1 object becomes inert.",
        "summary": "color management extension to a surface"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy the wp_color_management_surface_feedback_v1 object.",
            "summary": "destroy the color management interface for a surface"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_preferred",
          "description": {
            "type": "description",
            "text": "If this protocol object is inert, the protocol error inert is raised.\n\nThe preferred image description represents the compositor's preferred\ncolor encoding for this wl_surface at the current time. There might be\nperformance and power advantages, as well as improved color\nreproduction, if the image description of a content update matches the\npreferred image description.\n\nThis creates a new wp_image_description_v1 object for the currently\npreferred image description for the wl_surface. The client should\nstop using and destroy the image descriptions created by earlier\ninvocations of this request for the associated wl_surface.\nThis request is usually sent as a reaction to the preferred_changed\nevent or when creating a wp_color_management_surface_feedback_v1 object\nif the client is capable of adapting to image descriptions.\n\nThe created wp_image_description_v1 object preserves the preferred image\ndescription of the wl_surface from the time the object was created.\n\nThe resulting image description object allows get_information request.\n\nIf the image description is parametric, the client should set it on its\nwl_surface only if the image description is an exact match with the\nclient content. Particularly if everything else matches, but the target\ncolor volume is greater than what the client needs, the client should\ncreate its own parameric image description with its exact parameters.\n\nIf the interface version is inadequate for the preferred image\ndescription, meaning that the client does not support all the\nevents needed to deliver the crucial information, the resulting image\ndescription object shall immediately deliver the\nwp_image_description_v1.failed event with the low_version cause,\notherwise the object shall immediately deliver the ready event.",
            "summary": "get the preferred image description"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "new_id",
              "interface": "wp_image_description_v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "get_preferred_parametric",
          "description": {
            "type": "description",
            "text": "The same description as for get_preferred applies, except the returned\nimage description is guaranteed to be parametric. This is meant for\nclients that can only deal with parametric image descriptions.\n\nIf the compositor doesn't support parametric image descriptions, the\nunsupported_feature error is emitted.",
            "summary": "get the preferred image description"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "new_id",
              "interface": "wp_image_description_v1"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "preferred_changed",
          "description": {
            "type": "description",
            "text": "The preferred image description is the one which likely has the most\nperformance and/or quality benefits for the compositor if used by the\nclient for its wl_surface contents. This event is sent whenever the\ncompositor changes the wl_surface's preferred image description.\n\nThis event sends the identity of the new preferred state as the argument,\nso clients who are aware of the image description already can reuse it.\nOtherwise, if the client client wants to know what the preferred image\ndescription is, it shall use the get_preferred request.\n\nThe preferred image description is not automatically used for anything.\nIt is only a hint, and clients may set any valid image description with\nset_image_description, but there might be performance and color accuracy\nimprovements by providing the wl_surface contents in the preferred\nimage description. Therefore clients that can, should render according\nto the preferred image description",
            "summary": "the preferred image description changed"
          },
          "args": [
            {
              "type": "arg",
              "name": "identity",
              "argType": "uint",
              "summary": "image description id number"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "protocol errors"
          },
          "entries": [
            {
              "type": "entry",
              "name": "inert",
              "value": "0",
              "summary": "forbidden request on inert object"
            },
            {
              "type": "entry",
              "name": "unsupported_feature",
              "value": "1",
              "summary": "attempted to use an unsupported feature"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_image_description_creator_icc_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This type of object is used for collecting all the information required\nto create a wp_image_description_v1 object from an ICC file. A complete\nset of required parameters consists of these properties:\n- ICC file\n\nEach required property must be set exactly once if the client is to create\nan image description. The set requests verify that a property was not\nalready set. The create request verifies that all required properties are\nset. There may be several alternative requests for setting each property,\nand in that case the client must choose one of them.\n\nOnce all properties have been set, the create request must be used to\ncreate the image description object, destroying the creator in the\nprocess.",
        "summary": "holder of image description ICC information"
      },
      "requests": [
        {
          "type": "request",
          "name": "create",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Create an image description object based on the ICC information\npreviously set on this object. A compositor must parse the ICC data in\nsome undefined but finite amount of time.\n\nThe completeness of the parameter set is verified. If the set is not\ncomplete, the protocol error incomplete_set is raised. For the\ndefinition of a complete set, see the description of this interface.\n\nIf the particular combination of the information is not supported\nby the compositor, the resulting image description object shall\nimmediately deliver the wp_image_description_v1.failed event with the\n'unsupported' cause. If a valid image description was created from the\ninformation, the wp_image_description_v1.ready event will eventually\nbe sent instead.\n\nThis request destroys the wp_image_description_creator_icc_v1 object.\n\nThe resulting image description object does not allow get_information\nrequest.",
            "summary": "Create the image description object from ICC data"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "new_id",
              "interface": "wp_image_description_v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_icc_file",
          "description": {
            "type": "description",
            "text": "Sets the ICC profile file to be used as the basis of the image\ndescription.\n\nThe data shall be found through the given fd at the given offset, having\nthe given length. The fd must be seekable and readable. Violating these\nrequirements raises the bad_fd protocol error.\n\nIf reading the data fails due to an error independent of the client, the\ncompositor shall send the wp_image_description_v1.failed event on the\ncreated wp_image_description_v1 with the 'operating_system' cause.\n\nThe maximum size of the ICC profile is 32 MB. If length is greater than\nthat or zero, the protocol error bad_size is raised. If offset + length\nexceeds the file size, the protocol error out_of_file is raised.\n\nA compositor may read the file at any time starting from this request\nand only until whichever happens first:\n- If create request was issued, the wp_image_description_v1 object\ndelivers either failed or ready event; or\n- if create request was not issued, this\nwp_image_description_creator_icc_v1 object is destroyed.\n\nA compositor shall not modify the contents of the file, and the fd may\nbe sealed for writes and size changes. The client must ensure to its\nbest ability that the data does not change while the compositor is\nreading it.\n\nThe data must represent a valid ICC profile. The ICC profile version\nmust be 2 or 4, it must be a 3 channel profile and the class must be\nDisplay or ColorSpace. Violating these requirements will not result in a\nprotocol error, but will eventually send the\nwp_image_description_v1.failed event on the created\nwp_image_description_v1 with the 'unsupported' cause.\n\nSee the International Color Consortium specification ICC.1:2022 for more\ndetails about ICC profiles.\n\nIf ICC file has already been set on this object, the protocol error\nalready_set is raised.",
            "summary": "set the ICC profile file"
          },
          "args": [
            {
              "type": "arg",
              "name": "icc_profile",
              "argType": "fd",
              "summary": "ICC profile"
            },
            {
              "type": "arg",
              "name": "offset",
              "argType": "uint",
              "summary": "byte offset in fd to start of ICC data"
            },
            {
              "type": "arg",
              "name": "length",
              "argType": "uint",
              "summary": "length of ICC data in bytes"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "protocol errors"
          },
          "entries": [
            {
              "type": "entry",
              "name": "incomplete_set",
              "value": "0",
              "summary": "incomplete parameter set"
            },
            {
              "type": "entry",
              "name": "already_set",
              "value": "1",
              "summary": "property already set"
            },
            {
              "type": "entry",
              "name": "bad_fd",
              "value": "2",
              "summary": "fd not seekable and readable"
            },
            {
              "type": "entry",
              "name": "bad_size",
              "value": "3",
              "summary": "no or too much data"
            },
            {
              "type": "entry",
              "name": "out_of_file",
              "value": "4",
              "summary": "offset + length exceeds file size"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_image_description_creator_params_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "This type of object is used for collecting all the parameters required\nto create a wp_image_description_v1 object. A complete set of required\nparameters consists of these properties:\n- transfer characteristic function (tf)\n- chromaticities of primaries and white point (primary color volume)\n\nThe following properties are optional and have a well-defined default\nif not explicitly set:\n- primary color volume luminance range\n- reference white luminance level\n- mastering display primaries and white point (target color volume)\n- mastering luminance range\n\nThe following properties are optional and will be ignored\nif not explicitly set:\n- maximum content light level\n- maximum frame-average light level\n\nEach required property must be set exactly once if the client is to create\nan image description. The set requests verify that a property was not\nalready set. The create request verifies that all required properties are\nset. There may be several alternative requests for setting each property,\nand in that case the client must choose one of them.\n\nOnce all properties have been set, the create request must be used to\ncreate the image description object, destroying the creator in the\nprocess.",
        "summary": "holder of image description parameters"
      },
      "requests": [
        {
          "type": "request",
          "name": "create",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Create an image description object based on the parameters previously\nset on this object.\n\nThe completeness of the parameter set is verified. If the set is not\ncomplete, the protocol error incomplete_set is raised. For the\ndefinition of a complete set, see the description of this interface.\n\nThe protocol error invalid_luminance is raised if any of the following\nrequirements is not met:\n- When max_cll is set, it must be greater than min L and less or equal\nto max L of the mastering luminance range.\n- When max_fall is set, it must be greater than min L and less or equal\nto max L of the mastering luminance range.\n- When both max_cll and max_fall are set, max_fall must be less or equal\nto max_cll.\n\nIf the particular combination of the parameter set is not supported\nby the compositor, the resulting image description object shall\nimmediately deliver the wp_image_description_v1.failed event with the\n'unsupported' cause. If a valid image description was created from the\nparameter set, the wp_image_description_v1.ready event will eventually\nbe sent instead.\n\nThis request destroys the wp_image_description_creator_params_v1\nobject.\n\nThe resulting image description object does not allow get_information\nrequest.",
            "summary": "Create the image description object using params"
          },
          "args": [
            {
              "type": "arg",
              "name": "image_description",
              "argType": "new_id",
              "interface": "wp_image_description_v1"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_tf_named",
          "description": {
            "type": "description",
            "text": "Sets the transfer characteristic using explicitly enumerated named\nfunctions.\n\nWhen the resulting image description is attached to an image, the\ncontent should be encoded and decoded according to the industry standard\npractices for the transfer characteristic.\n\nOnly names advertised with wp_color_manager_v1 event supported_tf_named\nare allowed. Other values shall raise the protocol error invalid_tf.\n\nIf transfer characteristic has already been set on this object, the\nprotocol error already_set is raised.",
            "summary": "named transfer characteristic"
          },
          "args": [
            {
              "type": "arg",
              "name": "tf",
              "argType": "uint",
              "summary": "named transfer function",
              "enum": "wp_color_manager_v1.transfer_function"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_tf_power",
          "description": {
            "type": "description",
            "text": "Sets the color component transfer characteristic to a power curve with\nthe given exponent. Negative values are handled by mirroring the\npositive half of the curve through the origin. The valid domain and\nrange of the curve are all finite real numbers. This curve represents\nthe conversion from electrical to optical color channel values.\n\nWhen the resulting image description is attached to an image, the\ncontent should be encoded with the inverse of the power curve.\n\nThe curve exponent shall be multiplied by 10000 to get the argument eexp\nvalue to carry the precision of 4 decimals.\n\nThe curve exponent must be at least 1.0 and at most 10.0. Otherwise the\nprotocol error invalid_tf is raised.\n\nIf transfer characteristic has already been set on this object, the\nprotocol error already_set is raised.\n\nThis request can be used when the compositor advertises\nwp_color_manager_v1.feature.set_tf_power. Otherwise this request raises\nthe protocol error unsupported_feature.",
            "summary": "transfer characteristic as a power curve"
          },
          "args": [
            {
              "type": "arg",
              "name": "eexp",
              "argType": "uint",
              "summary": "the exponent * 10000"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_primaries_named",
          "description": {
            "type": "description",
            "text": "Sets the color primaries and white point using explicitly named sets.\nThis describes the primary color volume which is the basis for color\nvalue encoding.\n\nOnly names advertised with wp_color_manager_v1 event\nsupported_primaries_named are allowed. Other values shall raise the\nprotocol error invalid_primaries_named.\n\nIf primaries have already been set on this object, the protocol error\nalready_set is raised.",
            "summary": "named primaries"
          },
          "args": [
            {
              "type": "arg",
              "name": "primaries",
              "argType": "uint",
              "summary": "named primaries",
              "enum": "wp_color_manager_v1.primaries"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_primaries",
          "description": {
            "type": "description",
            "text": "Sets the color primaries and white point using CIE 1931 xy chromaticity\ncoordinates. This describes the primary color volume which is the basis\nfor color value encoding.\n\nEach coordinate value is multiplied by 1 million to get the argument\nvalue to carry precision of 6 decimals.\n\nIf primaries have already been set on this object, the protocol error\nalready_set is raised.\n\nThis request can be used if the compositor advertises\nwp_color_manager_v1.feature.set_primaries. Otherwise this request raises\nthe protocol error unsupported_feature.",
            "summary": "primaries as chromaticity coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "r_x",
              "argType": "int",
              "summary": "Red x * 1M"
            },
            {
              "type": "arg",
              "name": "r_y",
              "argType": "int",
              "summary": "Red y * 1M"
            },
            {
              "type": "arg",
              "name": "g_x",
              "argType": "int",
              "summary": "Green x * 1M"
            },
            {
              "type": "arg",
              "name": "g_y",
              "argType": "int",
              "summary": "Green y * 1M"
            },
            {
              "type": "arg",
              "name": "b_x",
              "argType": "int",
              "summary": "Blue x * 1M"
            },
            {
              "type": "arg",
              "name": "b_y",
              "argType": "int",
              "summary": "Blue y * 1M"
            },
            {
              "type": "arg",
              "name": "w_x",
              "argType": "int",
              "summary": "White x * 1M"
            },
            {
              "type": "arg",
              "name": "w_y",
              "argType": "int",
              "summary": "White y * 1M"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_luminances",
          "description": {
            "type": "description",
            "text": "Sets the primary color volume luminance range and the reference white\nluminance level. These values include the minimum display emission\nand ambient flare luminances, assumed to be optically additive and have\nthe chromaticity of the primary color volume white point.\n\nThe default luminances from\nhttps://www.color.org/chardata/rgb/srgb.xalter are\n- primary color volume minimum: 0.2 cd/m²\n- primary color volume maximum: 80 cd/m²\n- reference white: 80 cd/m²\n\nSetting a named transfer characteristic can imply other default\nluminances.\n\nThe default luminances get overwritten when this request is used.\nWith transfer_function.st2084_pq the given 'max_lum' value is ignored,\nand 'max_lum' is taken as 'min_lum' + 10000 cd/m².\n\n'min_lum' and 'max_lum' specify the minimum and maximum luminances of\nthe primary color volume as reproduced by the targeted display.\n\n'reference_lum' specifies the luminance of the reference white as\nreproduced by the targeted display, and reflects the targeted viewing\nenvironment.\n\nCompositors should make sure that all content is anchored, meaning that\nan input signal level of 'reference_lum' on one image description and\nanother input signal level of 'reference_lum' on another image\ndescription should produce the same output level, even though the\n'reference_lum' on both image representations can be different.\n\n'reference_lum' may be higher than 'max_lum'. In that case reaching\nthe reference white output level in image content requires the\n'extended_target_volume' feature support.\n\nIf 'max_lum' or 'reference_lum' are less than or equal to 'min_lum',\nthe protocol error invalid_luminance is raised.\n\nThe minimum luminance is multiplied by 10000 to get the argument\n'min_lum' value and carries precision of 4 decimals. The maximum\nluminance and reference white luminance values are unscaled.\n\nIf the primary color volume luminance range and the reference white\nluminance level have already been set on this object, the protocol error\nalready_set is raised.\n\nThis request can be used if the compositor advertises\nwp_color_manager_v1.feature.set_luminances. Otherwise this request\nraises the protocol error unsupported_feature.",
            "summary": "primary color volume luminance range and reference white"
          },
          "args": [
            {
              "type": "arg",
              "name": "min_lum",
              "argType": "uint",
              "summary": "minimum luminance (cd/m²) * 10000"
            },
            {
              "type": "arg",
              "name": "max_lum",
              "argType": "uint",
              "summary": "maximum luminance (cd/m²)"
            },
            {
              "type": "arg",
              "name": "reference_lum",
              "argType": "uint",
              "summary": "reference white luminance (cd/m²)"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_mastering_display_primaries",
          "description": {
            "type": "description",
            "text": "Provides the color primaries and white point of the mastering display\nusing CIE 1931 xy chromaticity coordinates. This is compatible with the\nSMPTE ST 2086 definition of HDR static metadata.\n\nThe mastering display primaries and mastering display luminances define\nthe target color volume.\n\nIf mastering display primaries are not explicitly set, the target color\nvolume is assumed to have the same primaries as the primary color volume.\n\nThe target color volume is defined by all tristimulus values between 0.0\nand 1.0 (inclusive) of the color space defined by the given mastering\ndisplay primaries and white point. The colorimetry is identical between\nthe container color space and the mastering display color space,\nincluding that no chromatic adaptation is applied even if the white\npoints differ.\n\nThe target color volume can exceed the primary color volume to allow for\na greater color volume with an existing color space definition (for\nexample scRGB). It can be smaller than the primary color volume to\nminimize gamut and tone mapping distances for big color spaces (HDR\nmetadata).\n\nTo make use of the entire target color volume a suitable pixel format\nhas to be chosen (e.g. floating point to exceed the primary color\nvolume, or abusing limited quantization range as with xvYCC).\n\nEach coordinate value is multiplied by 1 million to get the argument\nvalue to carry precision of 6 decimals.\n\nIf mastering display primaries have already been set on this object, the\nprotocol error already_set is raised.\n\nThis request can be used if the compositor advertises\nwp_color_manager_v1.feature.set_mastering_display_primaries. Otherwise\nthis request raises the protocol error unsupported_feature. The\nadvertisement implies support only for target color volumes fully\ncontained within the primary color volume.\n\nIf a compositor additionally supports target color volume exceeding the\nprimary color volume, it must advertise\nwp_color_manager_v1.feature.extended_target_volume. If a client uses\ntarget color volume exceeding the primary color volume and the\ncompositor does not support it, the result is implementation defined.\nCompositors are recommended to detect this case and fail the image\ndescription gracefully, but it may as well result in color artifacts.",
            "summary": "mastering display primaries as chromaticity coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "r_x",
              "argType": "int",
              "summary": "Red x * 1M"
            },
            {
              "type": "arg",
              "name": "r_y",
              "argType": "int",
              "summary": "Red y * 1M"
            },
            {
              "type": "arg",
              "name": "g_x",
              "argType": "int",
              "summary": "Green x * 1M"
            },
            {
              "type": "arg",
              "name": "g_y",
              "argType": "int",
              "summary": "Green y * 1M"
            },
            {
              "type": "arg",
              "name": "b_x",
              "argType": "int",
              "summary": "Blue x * 1M"
            },
            {
              "type": "arg",
              "name": "b_y",
              "argType": "int",
              "summary": "Blue y * 1M"
            },
            {
              "type": "arg",
              "name": "w_x",
              "argType": "int",
              "summary": "White x * 1M"
            },
            {
              "type": "arg",
              "name": "w_y",
              "argType": "int",
              "summary": "White y * 1M"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_mastering_luminance",
          "description": {
            "type": "description",
            "text": "Sets the luminance range that was used during the content mastering\nprocess as the minimum and maximum absolute luminance L. These values\ninclude the minimum display emission and ambient flare luminances,\nassumed to be optically additive and have the chromaticity of the\nprimary color volume white point. This should be\ncompatible with the SMPTE ST 2086 definition of HDR static metadata.\n\nThe mastering display primaries and mastering display luminances define\nthe target color volume.\n\nIf mastering luminances are not explicitly set, the target color volume\nis assumed to have the same min and max luminances as the primary color\nvolume.\n\nIf max L is less than or equal to min L, the protocol error\ninvalid_luminance is raised.\n\nMin L value is multiplied by 10000 to get the argument min_lum value\nand carry precision of 4 decimals. Max L value is unscaled for max_lum.\n\nThis request can be used if the compositor advertises\nwp_color_manager_v1.feature.set_mastering_display_primaries. Otherwise\nthis request raises the protocol error unsupported_feature. The\nadvertisement implies support only for target color volumes fully\ncontained within the primary color volume.\n\nIf a compositor additionally supports target color volume exceeding the\nprimary color volume, it must advertise\nwp_color_manager_v1.feature.extended_target_volume. If a client uses\ntarget color volume exceeding the primary color volume and the\ncompositor does not support it, the result is implementation defined.\nCompositors are recommended to detect this case and fail the image\ndescription gracefully, but it may as well result in color artifacts.",
            "summary": "display mastering luminance range"
          },
          "args": [
            {
              "type": "arg",
              "name": "min_lum",
              "argType": "uint",
              "summary": "min L (cd/m²) * 10000"
            },
            {
              "type": "arg",
              "name": "max_lum",
              "argType": "uint",
              "summary": "max L (cd/m²)"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_max_cll",
          "description": {
            "type": "description",
            "text": "Sets the maximum content light level (max_cll) as defined by CTA-861-H.\n\nmax_cll is undefined by default.",
            "summary": "maximum content light level"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_cll",
              "argType": "uint",
              "summary": "Maximum content light level (cd/m²)"
            }
          ]
        },
        {
          "type": "request",
          "name": "set_max_fall",
          "description": {
            "type": "description",
            "text": "Sets the maximum frame-average light level (max_fall) as defined by\nCTA-861-H.\n\nmax_fall is undefined by default.",
            "summary": "maximum frame-average light level"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_fall",
              "argType": "uint",
              "summary": "Maximum frame-average light level (cd/m²)"
            }
          ]
        }
      ],
      "events": [],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "protocol errors"
          },
          "entries": [
            {
              "type": "entry",
              "name": "incomplete_set",
              "value": "0",
              "summary": "incomplete parameter set"
            },
            {
              "type": "entry",
              "name": "already_set",
              "value": "1",
              "summary": "property already set"
            },
            {
              "type": "entry",
              "name": "unsupported_feature",
              "value": "2",
              "summary": "request not supported"
            },
            {
              "type": "entry",
              "name": "invalid_tf",
              "value": "3",
              "summary": "invalid transfer characteristic"
            },
            {
              "type": "entry",
              "name": "invalid_primaries_named",
              "value": "4",
              "summary": "invalid primaries named"
            },
            {
              "type": "entry",
              "name": "invalid_luminance",
              "value": "5",
              "summary": "invalid luminance value or range"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_image_description_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "An image description carries information about the color encoding used on\na surface when attached to a wl_surface via\nwp_color_management_surface_v1.set_image_description. A compositor can use\nthis information to decode pixel values into colorimetrically meaningful\nquantities.\n\nNote, that the wp_image_description_v1 object is not ready to be used\nimmediately after creation. The object eventually delivers either the\n'ready' or the 'failed' event, specified in all requests creating it. The\nobject is deemed \"ready\" after receiving the 'ready' event.\n\nAn object which is not ready is illegal to use, it can only be destroyed.\nAny other request in this interface shall result in the 'not_ready'\nprotocol error. Attempts to use an object which is not ready through other\ninterfaces shall raise protocol errors defined there.\n\nOnce created and regardless of how it was created, a\nwp_image_description_v1 object always refers to one fixed image\ndescription. It cannot change after creation.",
        "summary": "Colorimetric image description"
      },
      "requests": [
        {
          "type": "request",
          "name": "destroy",
          "requestType": "destructor",
          "description": {
            "type": "description",
            "text": "Destroy this object. It is safe to destroy an object which is not ready.\n\nDestroying a wp_image_description_v1 object has no side-effects, not\neven if a wp_color_management_surface_v1.set_image_description has not\nyet been followed by a wl_surface.commit.",
            "summary": "destroy the image description"
          },
          "args": []
        },
        {
          "type": "request",
          "name": "get_information",
          "description": {
            "type": "description",
            "text": "Creates a wp_image_description_info_v1 object which delivers the\ninformation that makes up the image description.\n\nNot all image description protocol objects allow get_information\nrequest. Whether it is allowed or not is defined by the request that\ncreated the object. If get_information is not allowed, the protocol\nerror no_information is raised.",
            "summary": "get information about the image description"
          },
          "args": [
            {
              "type": "arg",
              "name": "information",
              "argType": "new_id",
              "interface": "wp_image_description_info_v1"
            }
          ]
        }
      ],
      "events": [
        {
          "type": "event",
          "name": "failed",
          "description": {
            "type": "description",
            "text": "If creating a wp_image_description_v1 object fails for a reason that is\nnot defined as a protocol error, this event is sent.\n\nThe requests that create image description objects define whether and\nwhen this can occur. Only such creation requests can trigger this event.\nThis event cannot be triggered after the image description was\nsuccessfully formed.\n\nOnce this event has been sent, the wp_image_description_v1 object will\nnever become ready and it can only be destroyed.",
            "summary": "graceful error on creating the image description"
          },
          "args": [
            {
              "type": "arg",
              "name": "cause",
              "argType": "uint",
              "summary": "generic reason",
              "enum": "cause"
            },
            {
              "type": "arg",
              "name": "msg",
              "argType": "string",
              "summary": "ad hoc human-readable explanation"
            }
          ]
        },
        {
          "type": "event",
          "name": "ready",
          "description": {
            "type": "description",
            "text": "Once this event has been sent, the wp_image_description_v1 object is\ndeemed \"ready\". Ready objects can be used to send requests and can be\nused through other interfaces.\n\nEvery ready wp_image_description_v1 protocol object refers to an\nunderlying image description record in the compositor. Multiple protocol\nobjects may end up referring to the same record. Clients may identify\nthese \"copies\" by comparing their id numbers: if the numbers from two\nprotocol objects are identical, the protocol objects refer to the same\nimage description record. Two different image description records\ncannot have the same id number simultaneously. The id number does not\nchange during the lifetime of the image description record.\n\nThe id number is valid only as long as the protocol object is alive. If\nall protocol objects referring to the same image description record are\ndestroyed, the id number may be recycled for a different image\ndescription record.\n\nImage description id number is not a protocol object id. Zero is\nreserved as an invalid id number. It shall not be possible for a client\nto refer to an image description by its id number in protocol. The id\nnumbers might not be portable between Wayland connections. A compositor\nshall not send an invalid id number.\n\nThis identity allows clients to de-duplicate image description records\nand avoid get_information request if they already have the image\ndescription information.",
            "summary": "indication that the object is ready to be used"
          },
          "args": [
            {
              "type": "arg",
              "name": "identity",
              "argType": "uint",
              "summary": "image description id number"
            }
          ]
        }
      ],
      "enums": [
        {
          "type": "enum",
          "name": "error",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "protocol errors"
          },
          "entries": [
            {
              "type": "entry",
              "name": "not_ready",
              "value": "0",
              "summary": "attempted to use an object which is not ready"
            },
            {
              "type": "entry",
              "name": "no_information",
              "value": "1",
              "summary": "get_information not allowed"
            }
          ]
        },
        {
          "type": "enum",
          "name": "cause",
          "bitfield": false,
          "description": {
            "type": "description",
            "summary": "generic reason for failure"
          },
          "entries": [
            {
              "type": "entry",
              "name": "low_version",
              "value": "0",
              "summary": "interface version too low"
            },
            {
              "type": "entry",
              "name": "unsupported",
              "value": "1",
              "summary": "unsupported image description data"
            },
            {
              "type": "entry",
              "name": "operating_system",
              "value": "2",
              "summary": "error independent of the client"
            },
            {
              "type": "entry",
              "name": "no_output",
              "value": "3",
              "summary": "the relevant output no longer exists"
            }
          ]
        }
      ]
    },
    {
      "type": "interface",
      "name": "wp_image_description_info_v1",
      "version": "1",
      "description": {
        "type": "description",
        "text": "Sends all matching events describing an image description object exactly\nonce and finally sends the 'done' event.\n\nThis means\n- if the image description is parametric, it must send\n- primaries\n- named_primaries, if applicable\n- at least one of tf_power and tf_named, as applicable\n- luminances\n- target_primaries\n- target_luminance\n- if the image description is parametric, it may send, if applicable,\n- target_max_cll\n- target_max_fall\n- if the image description contains an ICC profile, it must send the\nicc_file event\n\nOnce a wp_image_description_info_v1 object has delivered a 'done' event it\nis automatically destroyed.\n\nEvery wp_image_description_info_v1 created from the same\nwp_image_description_v1 shall always return the exact same data.",
        "summary": "Colorimetric image description information"
      },
      "requests": [],
      "events": [
        {
          "type": "event",
          "name": "done",
          "eventType": "destructor",
          "description": {
            "type": "description",
            "text": "Signals the end of information events and destroys the object.",
            "summary": "end of information"
          },
          "args": []
        },
        {
          "type": "event",
          "name": "icc_file",
          "description": {
            "type": "description",
            "text": "The icc argument provides a file descriptor to the client which may be\nmemory-mapped to provide the ICC profile matching the image description.\nThe fd is read-only, and if mapped then it must be mapped with\nMAP_PRIVATE by the client.\n\nThe ICC profile version and other details are determined by the\ncompositor. There is no provision for a client to ask for a specific\nkind of a profile.",
            "summary": "ICC profile matching the image description"
          },
          "args": [
            {
              "type": "arg",
              "name": "icc",
              "argType": "fd",
              "summary": "ICC profile file descriptor"
            },
            {
              "type": "arg",
              "name": "icc_size",
              "argType": "uint",
              "summary": "ICC profile size, in bytes"
            }
          ]
        },
        {
          "type": "event",
          "name": "primaries",
          "description": {
            "type": "description",
            "text": "Delivers the primary color volume primaries and white point using CIE\n1931 xy chromaticity coordinates.\n\nEach coordinate value is multiplied by 1 million to get the argument\nvalue to carry precision of 6 decimals.",
            "summary": "primaries as chromaticity coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "r_x",
              "argType": "int",
              "summary": "Red x * 1M"
            },
            {
              "type": "arg",
              "name": "r_y",
              "argType": "int",
              "summary": "Red y * 1M"
            },
            {
              "type": "arg",
              "name": "g_x",
              "argType": "int",
              "summary": "Green x * 1M"
            },
            {
              "type": "arg",
              "name": "g_y",
              "argType": "int",
              "summary": "Green y * 1M"
            },
            {
              "type": "arg",
              "name": "b_x",
              "argType": "int",
              "summary": "Blue x * 1M"
            },
            {
              "type": "arg",
              "name": "b_y",
              "argType": "int",
              "summary": "Blue y * 1M"
            },
            {
              "type": "arg",
              "name": "w_x",
              "argType": "int",
              "summary": "White x * 1M"
            },
            {
              "type": "arg",
              "name": "w_y",
              "argType": "int",
              "summary": "White y * 1M"
            }
          ]
        },
        {
          "type": "event",
          "name": "primaries_named",
          "description": {
            "type": "description",
            "text": "Delivers the primary color volume primaries and white point using an\nexplicitly enumerated named set.",
            "summary": "named primaries"
          },
          "args": [
            {
              "type": "arg",
              "name": "primaries",
              "argType": "uint",
              "summary": "named primaries",
              "enum": "wp_color_manager_v1.primaries"
            }
          ]
        },
        {
          "type": "event",
          "name": "tf_power",
          "description": {
            "type": "description",
            "text": "The color component transfer characteristic of this image description is\na pure power curve. This event provides the exponent of the power\nfunction. This curve represents the conversion from electrical to\noptical pixel or color values.\n\nThe curve exponent has been multiplied by 10000 to get the argument eexp\nvalue to carry the precision of 4 decimals.",
            "summary": "transfer characteristic as a power curve"
          },
          "args": [
            {
              "type": "arg",
              "name": "eexp",
              "argType": "uint",
              "summary": "the exponent * 10000"
            }
          ]
        },
        {
          "type": "event",
          "name": "tf_named",
          "description": {
            "type": "description",
            "text": "Delivers the transfer characteristic using an explicitly enumerated\nnamed function.",
            "summary": "named transfer characteristic"
          },
          "args": [
            {
              "type": "arg",
              "name": "tf",
              "argType": "uint",
              "summary": "named transfer function",
              "enum": "wp_color_manager_v1.transfer_function"
            }
          ]
        },
        {
          "type": "event",
          "name": "luminances",
          "description": {
            "type": "description",
            "text": "Delivers the primary color volume luminance range and the reference\nwhite luminance level. These values include the minimum display emission\nand ambient flare luminances, assumed to be optically additive and have\nthe chromaticity of the primary color volume white point.\n\nThe minimum luminance is multiplied by 10000 to get the argument\n'min_lum' value and carries precision of 4 decimals. The maximum\nluminance and reference white luminance values are unscaled.",
            "summary": "primary color volume luminance range and reference white"
          },
          "args": [
            {
              "type": "arg",
              "name": "min_lum",
              "argType": "uint",
              "summary": "minimum luminance (cd/m²) * 10000"
            },
            {
              "type": "arg",
              "name": "max_lum",
              "argType": "uint",
              "summary": "maximum luminance (cd/m²)"
            },
            {
              "type": "arg",
              "name": "reference_lum",
              "argType": "uint",
              "summary": "reference white luminance (cd/m²)"
            }
          ]
        },
        {
          "type": "event",
          "name": "target_primaries",
          "description": {
            "type": "description",
            "text": "Provides the color primaries and white point of the target color volume\nusing CIE 1931 xy chromaticity coordinates. This is compatible with the\nSMPTE ST 2086 definition of HDR static metadata for mastering displays.\n\nWhile primary color volume is about how color is encoded, the target\ncolor volume is the actually displayable color volume. If target color\nvolume is equal to the primary color volume, then this event is not\nsent.\n\nEach coordinate value is multiplied by 1 million to get the argument\nvalue to carry precision of 6 decimals.",
            "summary": "target primaries as chromaticity coordinates"
          },
          "args": [
            {
              "type": "arg",
              "name": "r_x",
              "argType": "int",
              "summary": "Red x * 1M"
            },
            {
              "type": "arg",
              "name": "r_y",
              "argType": "int",
              "summary": "Red y * 1M"
            },
            {
              "type": "arg",
              "name": "g_x",
              "argType": "int",
              "summary": "Green x * 1M"
            },
            {
              "type": "arg",
              "name": "g_y",
              "argType": "int",
              "summary": "Green y * 1M"
            },
            {
              "type": "arg",
              "name": "b_x",
              "argType": "int",
              "summary": "Blue x * 1M"
            },
            {
              "type": "arg",
              "name": "b_y",
              "argType": "int",
              "summary": "Blue y * 1M"
            },
            {
              "type": "arg",
              "name": "w_x",
              "argType": "int",
              "summary": "White x * 1M"
            },
            {
              "type": "arg",
              "name": "w_y",
              "argType": "int",
              "summary": "White y * 1M"
            }
          ]
        },
        {
          "type": "event",
          "name": "target_luminance",
          "description": {
            "type": "description",
            "text": "Provides the luminance range that the image description is targeting as\nthe minimum and maximum absolute luminance L. These values include the\nminimum display emission and ambient flare luminances, assumed to be\noptically additive and have the chromaticity of the primary color\nvolume white point. This should be compatible with the SMPTE ST 2086\ndefinition of HDR static metadata.\n\nThis luminance range is only theoretical and may not correspond to the\nluminance of light emitted on an actual display.\n\nMin L value is multiplied by 10000 to get the argument min_lum value and\ncarry precision of 4 decimals. Max L value is unscaled for max_lum.",
            "summary": "target luminance range"
          },
          "args": [
            {
              "type": "arg",
              "name": "min_lum",
              "argType": "uint",
              "summary": "min L (cd/m²) * 10000"
            },
            {
              "type": "arg",
              "name": "max_lum",
              "argType": "uint",
              "summary": "max L (cd/m²)"
            }
          ]
        },
        {
          "type": "event",
          "name": "target_max_cll",
          "description": {
            "type": "description",
            "text": "Provides the targeted max_cll of the image description. max_cll is\ndefined by CTA-861-H.\n\nThis luminance is only theoretical and may not correspond to the\nluminance of light emitted on an actual display.",
            "summary": "target maximum content light level"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_cll",
              "argType": "uint",
              "summary": "Maximum content light-level (cd/m²)"
            }
          ]
        },
        {
          "type": "event",
          "name": "target_max_fall",
          "description": {
            "type": "description",
            "text": "Provides the targeted max_fall of the image description. max_fall is\ndefined by CTA-861-H.\n\nThis luminance is only theoretical and may not correspond to the\nluminance of light emitted on an actual display.",
            "summary": "target maximum frame-average light level"
          },
          "args": [
            {
              "type": "arg",
              "name": "max_fall",
              "argType": "uint",
              "summary": "Maximum frame-average light level (cd/m²)"
            }
          ]
        }
      ],
      "enums": []
    }
  ]
}
