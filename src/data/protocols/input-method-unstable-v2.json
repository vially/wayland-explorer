{"type":"protocol","name":"input_method_unstable_v2","copyright":{"type":"copyright","text":"Copyright © 2008-2011 Kristian Høgsberg\n    Copyright © 2010-2011 Intel Corporation\n    Copyright © 2012-2013 Collabora, Ltd.\n    Copyright © 2012, 2013 Intel Corporation\n    Copyright © 2015, 2016 Jan Arne Petersen\n    Copyright © 2017, 2018 Red Hat, Inc.\n    Copyright © 2018       Purism SPC\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice (including the next\n    paragraph) shall be included in all copies or substantial portions of the\n    Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE."},"description":{"type":"description","text":"This protocol allows applications to act as input methods for compositors.\n\n    An input method context is used to manage the state of the input method.\n\n    Text strings are UTF-8 encoded, their indices and lengths are in bytes.\n\n    This document adheres to the RFC 2119 when using words like \"must\",\n    \"should\", \"may\", etc.\n\n    Warning! The protocol described in this file is experimental and\n    backward incompatible changes may be made. Backward compatible changes\n    may be added together with the corresponding interface version bump.\n    Backward incompatible changes are done by bumping the version number in\n    the protocol and interface names and resetting the interface version.\n    Once the protocol is to be declared stable, the 'z' prefix and the\n    version number in the protocol and interface names are removed and the\n    interface version number is reset.","summary":"Protocol for creating input methods"},"interfaces":[{"type":"interface","name":"zwp_input_method_v2","version":"1","description":{"type":"description","text":"An input method object allows for clients to compose text.\n\n      The objects connects the client to a text input in an application, and\n      lets the client to serve as an input method for a seat.\n\n      The zwp_input_method_v2 object can occupy two distinct states: active and\n      inactive. In the active state, the object is associated to and\n      communicates with a text input. In the inactive state, there is no\n      associated text input, and the only communication is with the compositor.\n      Initially, the input method is in the inactive state.\n\n      Requests issued in the inactive state must be accepted by the compositor.\n      Because of the serial mechanism, and the state reset on activate event,\n      they will not have any effect on the state of the next text input.\n\n      There must be no more than one input method object per seat.","summary":"input method"},"requests":[{"type":"request","name":"commit_string","description":{"type":"description","text":"Send the commit string text for insertion to the application.\n\n        Inserts a string at current cursor position (see commit event\n        sequence). The string to commit could be either just a single character\n        after a key press or the result of some composing.\n\n        The argument text is a buffer containing the string to insert. There is\n        a maximum length of wayland messages, so text can not be longer than\n        4000 bytes.\n\n        Values set with this event are double-buffered. They must be applied\n        and reset to initial on the next zwp_text_input_v3.commit request.\n\n        The initial value of text is an empty string.","summary":"commit string"},"args":[{"type":"arg","name":"text","argType":"string"}]},{"type":"request","name":"set_preedit_string","description":{"type":"description","text":"Send the pre-edit string text to the application text input.\n\n        Place a new composing text (pre-edit) at the current cursor position.\n        Any previously set composing text must be removed. Any previously\n        existing selected text must be removed. The cursor is moved to a new\n        position within the preedit string.\n\n        The argument text is a buffer containing the preedit string. There is\n        a maximum length of wayland messages, so text can not be longer than\n        4000 bytes.\n\n        The arguments cursor_begin and cursor_end are counted in bytes relative\n        to the beginning of the submitted string buffer. Cursor should be\n        hidden by the text input when both are equal to -1.\n\n        cursor_begin indicates the beginning of the cursor. cursor_end\n        indicates the end of the cursor. It may be equal or different than\n        cursor_begin.\n\n        Values set with this event are double-buffered. They must be applied on\n        the next zwp_input_method_v2.commit event.\n\n        The initial value of text is an empty string. The initial value of\n        cursor_begin, and cursor_end are both 0.","summary":"pre-edit string"},"args":[{"type":"arg","name":"text","argType":"string"},{"type":"arg","name":"cursor_begin","argType":"int"},{"type":"arg","name":"cursor_end","argType":"int"}]},{"type":"request","name":"delete_surrounding_text","description":{"type":"description","text":"Remove the surrounding text.\n\n        before_length and after_length are the number of bytes before and after\n        the current cursor index (excluding the preedit text) to delete.\n\n        If any preedit text is present, it is replaced with the cursor for the\n        purpose of this event. In effect before_length is counted from the\n        beginning of preedit text, and after_length from its end (see commit\n        event sequence).\n\n        Values set with this event are double-buffered. They must be applied\n        and reset to initial on the next zwp_input_method_v2.commit request.\n\n        The initial values of both before_length and after_length are 0.","summary":"delete text"},"args":[{"type":"arg","name":"before_length","argType":"uint"},{"type":"arg","name":"after_length","argType":"uint"}]},{"type":"request","name":"commit","description":{"type":"description","text":"Apply state changes from commit_string, set_preedit_string and\n        delete_surrounding_text requests.\n\n        The state relating to these events is double-buffered, and each one\n        modifies the pending state. This request replaces the current state\n        with the pending state.\n\n        The connected text input is expected to proceed by evaluating the\n        changes in the following order:\n\n        1. Replace existing preedit string with the cursor.\n        2. Delete requested surrounding text.\n        3. Insert commit string with the cursor at its end.\n        4. Calculate surrounding text to send.\n        5. Insert new preedit text in cursor position.\n        6. Place cursor inside preedit text.\n\n        The serial number reflects the last state of the zwp_input_method_v2\n        object known to the client. The value of the serial argument must be\n        equal to the number of done events already issued by that object. When\n        the compositor receives a commit request with a serial different than\n        the number of past done events, it must proceed as normal, except it\n        should not change the current state of the zwp_input_method_v2 object.","summary":"apply state"},"args":[{"type":"arg","name":"serial","argType":"uint"}]},{"type":"request","name":"get_input_popup_surface","description":{"type":"description","text":"Creates a new zwp_input_popup_surface_v2 object wrapping a given\n        surface.\n\n        The surface gets assigned the \"input_popup\" role. If the surface\n        already has an assigned role, the compositor must issue a protocol\n        error.","summary":"create popup surface"},"args":[{"type":"arg","name":"id","argType":"new_id","interface":"zwp_input_popup_surface_v2"},{"type":"arg","name":"surface","argType":"object","interface":"wl_surface"}]},{"type":"request","name":"grab_keyboard","description":{"type":"description","text":"Allow an input method to receive hardware keyboard input and process\n        key events to generate text events (with pre-edit) over the wire. This\n        allows input methods which compose multiple key events for inputting\n        text like it is done for CJK languages.\n\n        The compositor should send all keyboard events on the seat to the grab\n        holder via the returned wl_keyboard object. Nevertheless, the\n        compositor may decide not to forward any particular event. The\n        compositor must not further process any event after it has been\n        forwarded to the grab holder.\n\n        Releasing the resulting wl_keyboard object releases the grab.","summary":"grab hardware keyboard"},"args":[{"type":"arg","name":"keyboard","argType":"new_id","interface":"zwp_input_method_keyboard_grab_v2"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroys the zwp_text_input_v2 object and any associated child\n        objects, i.e. zwp_input_popup_surface_v2 and\n        zwp_input_method_keyboard_grab_v2.","summary":"destroy the text input"},"args":[]}],"events":[{"type":"event","name":"activate","description":{"type":"description","text":"Notification that a text input focused on this seat requested the input\n        method to be activated.\n\n        This event serves the purpose of providing the compositor with an\n        active input method.\n\n        This event resets all state associated with previous enable, disable,\n        surrounding_text, text_change_cause, and content_type events, as well\n        as the state associated with set_preedit_string, commit_string, and\n        delete_surrounding_text requests. In addition, it marks the\n        zwp_input_method_v2 object as active, and makes any existing\n        zwp_input_popup_surface_v2 objects visible.\n\n        The surrounding_text, and content_type events must follow before the\n        next done event if the text input supports the respective\n        functionality.\n\n        State set with this event is double-buffered. It will get applied on\n        the next zwp_input_method_v2.done event, and stay valid until changed.","summary":"input method has been requested"},"args":[]},{"type":"event","name":"deactivate","description":{"type":"description","text":"Notification that no focused text input currently needs an active \n        input method on this seat.\n\n        This event marks the zwp_input_method_v2 object as inactive. The\n        compositor must make all existing zwp_input_popup_surface_v2 objects\n        invisible until the next activate event.\n\n        State set with this event is double-buffered. It will get applied on\n        the next zwp_input_method_v2.done event, and stay valid until changed.","summary":"deactivate event"},"args":[]},{"type":"event","name":"surrounding_text","description":{"type":"description","text":"Updates the surrounding plain text around the cursor, excluding the\n        preedit text.\n\n        If any preedit text is present, it is replaced with the cursor for the\n        purpose of this event.\n\n        The argument text is a buffer containing the preedit string, and must\n        include the cursor position, and the complete selection. It should\n        contain additional characters before and after these. There is a\n        maximum length of wayland messages, so text can not be longer than 4000\n        bytes.\n\n        cursor is the byte offset of the cursor within the text buffer.\n\n        anchor is the byte offset of the selection anchor within the text\n        buffer. If there is no selected text, anchor must be the same as\n        cursor.\n\n        If this event does not arrive before the first done event, the input\n        method may assume that the text input does not support this\n        functionality and ignore following surrounding_text events.\n\n        Values set with this event are double-buffered. They will get applied\n        and set to initial values on the next zwp_input_method_v2.done\n        event.\n\n        The initial state for affected fields is empty, meaning that the text\n        input does not support sending surrounding text. If the empty values\n        get applied, subsequent attempts to change them may have no effect.","summary":"surrounding text event"},"args":[{"type":"arg","name":"text","argType":"string"},{"type":"arg","name":"cursor","argType":"uint"},{"type":"arg","name":"anchor","argType":"uint"}]},{"type":"event","name":"text_change_cause","description":{"type":"description","text":"Tells the input method why the text surrounding the cursor changed.\n\n        Whenever the client detects an external change in text, cursor, or\n        anchor position, it must issue this request to the compositor. This\n        request is intended to give the input method a chance to update the\n        preedit text in an appropriate way, e.g. by removing it when the user\n        starts typing with a keyboard.\n\n        cause describes the source of the change.\n\n        The value set with this event is double-buffered. It will get applied\n        and set to its initial value on the next zwp_input_method_v2.done\n        event.\n\n        The initial value of cause is input_method.","summary":"indicates the cause of surrounding text change"},"args":[{"type":"arg","name":"cause","argType":"uint","enum":"zwp_text_input_v3.change_cause"}]},{"type":"event","name":"content_type","description":{"type":"description","text":"Indicates the content type and hint for the current\n        zwp_input_method_v2 instance.\n\n        Values set with this event are double-buffered. They will get applied\n        on the next zwp_input_method_v2.done event.\n\n        The initial value for hint is none, and the initial value for purpose\n        is normal.","summary":"content purpose and hint"},"args":[{"type":"arg","name":"hint","argType":"uint","enum":"zwp_text_input_v3.content_hint"},{"type":"arg","name":"purpose","argType":"uint","enum":"zwp_text_input_v3.content_purpose"}]},{"type":"event","name":"done","description":{"type":"description","text":"Atomically applies state changes recently sent to the client.\n\n        The done event establishes and updates the state of the client, and\n        must be issued after any changes to apply them.\n\n        Text input state (content purpose, content hint, surrounding text, and\n        change cause) is conceptually double-buffered within an input method\n        context.\n\n        Events modify the pending state, as opposed to the current state in use\n        by the input method. A done event atomically applies all pending state,\n        replacing the current state. After done, the new pending state is as\n        documented for each related request.\n\n        Events must be applied in the order of arrival.\n\n        Neither current nor pending state are modified unless noted otherwise.","summary":"apply state"},"args":[]},{"type":"event","name":"unavailable","description":{"type":"description","text":"The input method ceased to be available.\n\n        The compositor must issue this event as the only event on the object if\n        there was another input_method object associated with the same seat at\n        the time of its creation.\n\n        The compositor must issue this request when the object is no longer\n        usable, e.g. due to seat removal.\n\n        The input method context becomes inert and should be destroyed after\n        deactivation is handled. Any further requests and events except for the\n        destroy request must be ignored.","summary":"input method unavailable"},"args":[]}],"enums":[{"type":"enum","name":"error","bitfield":false,"entries":[{"type":"entry","name":"role","value":"0","summary":"wl_surface has another role"}]}]},{"type":"interface","name":"zwp_input_popup_surface_v2","version":"1","description":{"type":"description","text":"This interface marks a surface as a popup for interacting with an input\n      method.\n\n      The compositor should place it near the active text input area. It must\n      be visible if and only if the input method is in the active state.\n\n      The client must not destroy the underlying wl_surface while the\n      zwp_input_popup_surface_v2 object exists.","summary":"popup surface"},"requests":[{"type":"request","name":"destroy","requestType":"destructor","args":[]}],"events":[{"type":"event","name":"text_input_rectangle","description":{"type":"description","text":"Notify about the position of the area of the text input expressed as a\n        rectangle in surface local coordinates.\n\n        This is a hint to the input method telling it the relative position of\n        the text being entered.","summary":"set text input area position"},"args":[{"type":"arg","name":"x","argType":"int"},{"type":"arg","name":"y","argType":"int"},{"type":"arg","name":"width","argType":"int"},{"type":"arg","name":"height","argType":"int"}]}],"enums":[]},{"type":"interface","name":"zwp_input_method_keyboard_grab_v2","version":"1","description":{"type":"description","text":"The zwp_input_method_keyboard_grab_v2 interface represents an exclusive\n      grab of the wl_keyboard interface associated with the seat.","summary":"keyboard grab"},"requests":[{"type":"request","name":"release","requestType":"destructor","description":{"type":"description","summary":"release the grab object"},"args":[]}],"events":[{"type":"event","name":"keymap","description":{"type":"description","text":"This event provides a file descriptor to the client which can be\n        memory-mapped to provide a keyboard mapping description.","summary":"keyboard mapping"},"args":[{"type":"arg","name":"format","argType":"uint","summary":"keymap format","enum":"wl_keyboard.keymap_format"},{"type":"arg","name":"fd","argType":"fd","summary":"keymap file descriptor"},{"type":"arg","name":"size","argType":"uint","summary":"keymap size, in bytes"}]},{"type":"event","name":"key","description":{"type":"description","text":"A key was pressed or released.\n        The time argument is a timestamp with millisecond granularity, with an\n        undefined base.","summary":"key event"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"serial number of the key event"},{"type":"arg","name":"time","argType":"uint","summary":"timestamp with millisecond granularity"},{"type":"arg","name":"key","argType":"uint","summary":"key that produced the event"},{"type":"arg","name":"state","argType":"uint","summary":"physical state of the key","enum":"wl_keyboard.key_state"}]},{"type":"event","name":"modifiers","description":{"type":"description","text":"Notifies clients that the modifier and/or group state has changed, and\n        it should update its local state.","summary":"modifier and group state"},"args":[{"type":"arg","name":"serial","argType":"uint","summary":"serial number of the modifiers event"},{"type":"arg","name":"mods_depressed","argType":"uint","summary":"depressed modifiers"},{"type":"arg","name":"mods_latched","argType":"uint","summary":"latched modifiers"},{"type":"arg","name":"mods_locked","argType":"uint","summary":"locked modifiers"},{"type":"arg","name":"group","argType":"uint","summary":"keyboard layout"}]},{"type":"event","name":"repeat_info","description":{"type":"description","text":"Informs the client about the keyboard's repeat rate and delay.\n\n        This event is sent as soon as the zwp_input_method_keyboard_grab_v2\n        object has been created, and is guaranteed to be received by the\n        client before any key press event.\n\n        Negative values for either rate or delay are illegal. A rate of zero\n        will disable any repeating (regardless of the value of delay).\n\n        This event can be sent later on as well with a new value if necessary,\n        so clients should continue listening for the event past the creation\n        of zwp_input_method_keyboard_grab_v2.","summary":"repeat rate and delay"},"args":[{"type":"arg","name":"rate","argType":"int","summary":"the rate of repeating keys in characters per second"},{"type":"arg","name":"delay","argType":"int","summary":"delay in milliseconds since key down until repeating starts"}]}],"enums":[]},{"type":"interface","name":"zwp_input_method_manager_v2","version":"1","description":{"type":"description","text":"The input method manager allows the client to become the input method on\n      a chosen seat.\n\n      No more than one input method must be associated with any seat at any\n      given time.","summary":"input method manager"},"requests":[{"type":"request","name":"get_input_method","description":{"type":"description","text":"Request a new input zwp_input_method_v2 object associated with a given\n        seat.","summary":"request an input method object"},"args":[{"type":"arg","name":"seat","argType":"object","interface":"wl_seat"},{"type":"arg","name":"input_method","argType":"new_id","interface":"zwp_input_method_v2"}]},{"type":"request","name":"destroy","requestType":"destructor","description":{"type":"description","text":"Destroys the zwp_input_method_manager_v2 object.\n\n        The zwp_input_method_v2 objects originating from it remain valid.","summary":"destroy the input method manager"},"args":[]}],"events":[],"enums":[]}]}